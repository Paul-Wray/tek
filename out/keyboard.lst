                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.0 #11195 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module keyboard
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _addActiveKey_PARM_2
                                     12 	.globl _clr_PARM_2
                                     13 	.globl _sendKeys_combineKeyAlternates_65536_54
                                     14 	.globl _sendKeys_key_index_65536_54
                                     15 	.globl _read_column_KeyScan_Table_65536_43
                                     16 	.globl _prtHex_hexTab_65536_28
                                     17 	.globl _scan
                                     18 	.globl _addActiveKey
                                     19 	.globl _updateActiveKeys
                                     20 	.globl _sendKeys
                                     21 	.globl _msg
                                     22 	.globl _read_column
                                     23 	.globl _delayMicroSec
                                     24 	.globl _KB_LED_Status
                                     25 	.globl _KB_LED_Off
                                     26 	.globl _initKeyboard
                                     27 	.globl _prtHex
                                     28 	.globl _clr
                                     29 	.globl _INT2
                                     30 	.globl _INT3
                                     31 	.globl _RXD
                                     32 	.globl _TXD
                                     33 	.globl _INT0
                                     34 	.globl _INT1
                                     35 	.globl _T0
                                     36 	.globl _T1
                                     37 	.globl _WR
                                     38 	.globl _RD
                                     39 	.globl _I2C_SCL
                                     40 	.globl _I2C_SDA
                                     41 	.globl _SPI_SS
                                     42 	.globl _SPI_MOSI
                                     43 	.globl _SPI_MISO
                                     44 	.globl _SPI_CLK
                                     45 	.globl _T2
                                     46 	.globl _T2EX
                                     47 	.globl _P40
                                     48 	.globl _P41
                                     49 	.globl _P42
                                     50 	.globl _P43
                                     51 	.globl _P30
                                     52 	.globl _P31
                                     53 	.globl _P32
                                     54 	.globl _P33
                                     55 	.globl _P34
                                     56 	.globl _P35
                                     57 	.globl _P36
                                     58 	.globl _P37
                                     59 	.globl _P20
                                     60 	.globl _P21
                                     61 	.globl _P22
                                     62 	.globl _P23
                                     63 	.globl _P24
                                     64 	.globl _P25
                                     65 	.globl _P26
                                     66 	.globl _P27
                                     67 	.globl _P10
                                     68 	.globl _P11
                                     69 	.globl _P12
                                     70 	.globl _P13
                                     71 	.globl _P14
                                     72 	.globl _P15
                                     73 	.globl _P16
                                     74 	.globl _P17
                                     75 	.globl _P00
                                     76 	.globl _P01
                                     77 	.globl _P02
                                     78 	.globl _P03
                                     79 	.globl _P04
                                     80 	.globl _P05
                                     81 	.globl _P06
                                     82 	.globl _P07
                                     83 	.globl _CR0
                                     84 	.globl _CR1
                                     85 	.globl _AA
                                     86 	.globl _SI
                                     87 	.globl _STO
                                     88 	.globl _STA
                                     89 	.globl _ENSI
                                     90 	.globl _CR2
                                     91 	.globl _IT2
                                     92 	.globl _IE2
                                     93 	.globl _EX2
                                     94 	.globl _IL2
                                     95 	.globl _IT3
                                     96 	.globl _IE3
                                     97 	.globl _EX3
                                     98 	.globl _IL3
                                     99 	.globl _CP_RL2
                                    100 	.globl _C_T2
                                    101 	.globl _TR2
                                    102 	.globl _EXEN2
                                    103 	.globl _TCLK
                                    104 	.globl _RCLK
                                    105 	.globl _EXF2
                                    106 	.globl _TF2
                                    107 	.globl _IT0
                                    108 	.globl _IE0
                                    109 	.globl _IT1
                                    110 	.globl _IE1
                                    111 	.globl _TR0
                                    112 	.globl _TF0
                                    113 	.globl _TR1
                                    114 	.globl _TF1
                                    115 	.globl _FE
                                    116 	.globl _RI
                                    117 	.globl _TI
                                    118 	.globl _RB8
                                    119 	.globl _TB8
                                    120 	.globl _REN
                                    121 	.globl _SM2
                                    122 	.globl _SM1
                                    123 	.globl _SM0
                                    124 	.globl _PX0
                                    125 	.globl _PT0
                                    126 	.globl _PX1
                                    127 	.globl _PT1
                                    128 	.globl _PS
                                    129 	.globl _PT2
                                    130 	.globl _PX2
                                    131 	.globl _PX3
                                    132 	.globl _EX0
                                    133 	.globl _ET0
                                    134 	.globl _EX1
                                    135 	.globl _ET1
                                    136 	.globl _ES
                                    137 	.globl _ET2
                                    138 	.globl _EA
                                    139 	.globl _P
                                    140 	.globl _OV
                                    141 	.globl _RS0
                                    142 	.globl _RS1
                                    143 	.globl _F0
                                    144 	.globl _AC
                                    145 	.globl _CY
                                    146 	.globl _SCMD
                                    147 	.globl _IFADRL
                                    148 	.globl _IFADRH
                                    149 	.globl _IFD
                                    150 	.globl _ISPTME
                                    151 	.globl _ISPCR
                                    152 	.globl _WDTCR
                                    153 	.globl _AUXR2
                                    154 	.globl _AUXR
                                    155 	.globl _CKCON2
                                    156 	.globl _CKCON
                                    157 	.globl _PCON
                                    158 	.globl _SISTA
                                    159 	.globl _SIDAT
                                    160 	.globl _SIADR
                                    161 	.globl _SICON
                                    162 	.globl _SPSTAT
                                    163 	.globl _SPDAT
                                    164 	.globl _SPCTL
                                    165 	.globl _KBMASK
                                    166 	.globl _KBPATN
                                    167 	.globl _KBCON
                                    168 	.globl _SADEN
                                    169 	.globl _SADDR
                                    170 	.globl _SBUF
                                    171 	.globl _SCON
                                    172 	.globl _TH2
                                    173 	.globl _TL2
                                    174 	.globl _TH1
                                    175 	.globl _TL1
                                    176 	.globl _TH0
                                    177 	.globl _TL0
                                    178 	.globl _RCAP2H
                                    179 	.globl _RCAP2L
                                    180 	.globl _T2MOD
                                    181 	.globl _T2CON
                                    182 	.globl _TMOD
                                    183 	.globl _TCON
                                    184 	.globl _P4M1
                                    185 	.globl _P4M0
                                    186 	.globl _P3M1
                                    187 	.globl _P3M0
                                    188 	.globl _P2M1
                                    189 	.globl _P2M0
                                    190 	.globl _P1M1
                                    191 	.globl _P1M0
                                    192 	.globl _P0M1
                                    193 	.globl _P0M0
                                    194 	.globl _P4
                                    195 	.globl _P3
                                    196 	.globl _P2
                                    197 	.globl _P1
                                    198 	.globl _P0
                                    199 	.globl _IP
                                    200 	.globl _XICON
                                    201 	.globl _AUXIP
                                    202 	.globl _AUXIE
                                    203 	.globl _IE
                                    204 	.globl _PSW
                                    205 	.globl _DPH
                                    206 	.globl _DPL
                                    207 	.globl _SP
                                    208 	.globl _B
                                    209 	.globl _ACC
                                    210 	.globl _ScrollLock
                                    211 	.globl _Caps
                                    212 	.globl _NumLock
                                    213 	.globl _allKeys
                                    214 	.globl _ToHost
                                    215 	.globl _downCount
                                    216 	.globl _activeKeys
                                    217 	.globl _LED_STATUS
                                    218 	.globl _sendKeyReport
                                    219 ;--------------------------------------------------------
                                    220 ; special function registers
                                    221 ;--------------------------------------------------------
                                    222 	.area RSEG    (ABS,DATA)
      000000                        223 	.org 0x0000
                           0000E0   224 _ACC	=	0x00e0
                           0000F0   225 _B	=	0x00f0
                           000081   226 _SP	=	0x0081
                           000082   227 _DPL	=	0x0082
                           000083   228 _DPH	=	0x0083
                           0000D0   229 _PSW	=	0x00d0
                           0000A8   230 _IE	=	0x00a8
                           0000AD   231 _AUXIE	=	0x00ad
                           0000AE   232 _AUXIP	=	0x00ae
                           0000C0   233 _XICON	=	0x00c0
                           0000B8   234 _IP	=	0x00b8
                           000080   235 _P0	=	0x0080
                           000090   236 _P1	=	0x0090
                           0000A0   237 _P2	=	0x00a0
                           0000B0   238 _P3	=	0x00b0
                           0000E8   239 _P4	=	0x00e8
                           000093   240 _P0M0	=	0x0093
                           000094   241 _P0M1	=	0x0094
                           000091   242 _P1M0	=	0x0091
                           000092   243 _P1M1	=	0x0092
                           000095   244 _P2M0	=	0x0095
                           000096   245 _P2M1	=	0x0096
                           0000B1   246 _P3M0	=	0x00b1
                           0000B2   247 _P3M1	=	0x00b2
                           0000B3   248 _P4M0	=	0x00b3
                           0000B4   249 _P4M1	=	0x00b4
                           000088   250 _TCON	=	0x0088
                           000089   251 _TMOD	=	0x0089
                           0000C8   252 _T2CON	=	0x00c8
                           0000C9   253 _T2MOD	=	0x00c9
                           0000CA   254 _RCAP2L	=	0x00ca
                           0000CB   255 _RCAP2H	=	0x00cb
                           00008A   256 _TL0	=	0x008a
                           00008C   257 _TH0	=	0x008c
                           00008B   258 _TL1	=	0x008b
                           00008D   259 _TH1	=	0x008d
                           0000CC   260 _TL2	=	0x00cc
                           0000CD   261 _TH2	=	0x00cd
                           000098   262 _SCON	=	0x0098
                           000099   263 _SBUF	=	0x0099
                           0000A9   264 _SADDR	=	0x00a9
                           0000B9   265 _SADEN	=	0x00b9
                           0000D6   266 _KBCON	=	0x00d6
                           0000D5   267 _KBPATN	=	0x00d5
                           0000D7   268 _KBMASK	=	0x00d7
                           000085   269 _SPCTL	=	0x0085
                           000086   270 _SPDAT	=	0x0086
                           000084   271 _SPSTAT	=	0x0084
                           0000F8   272 _SICON	=	0x00f8
                           0000D1   273 _SIADR	=	0x00d1
                           0000D2   274 _SIDAT	=	0x00d2
                           0000D3   275 _SISTA	=	0x00d3
                           000087   276 _PCON	=	0x0087
                           0000C7   277 _CKCON	=	0x00c7
                           0000BF   278 _CKCON2	=	0x00bf
                           00008E   279 _AUXR	=	0x008e
                           0000A6   280 _AUXR2	=	0x00a6
                           0000E1   281 _WDTCR	=	0x00e1
                           0000E7   282 _ISPCR	=	0x00e7
                           0000E5   283 _ISPTME	=	0x00e5
                           0000E2   284 _IFD	=	0x00e2
                           0000E3   285 _IFADRH	=	0x00e3
                           0000E4   286 _IFADRL	=	0x00e4
                           0000E6   287 _SCMD	=	0x00e6
                                    288 ;--------------------------------------------------------
                                    289 ; special function bits
                                    290 ;--------------------------------------------------------
                                    291 	.area RSEG    (ABS,DATA)
      000000                        292 	.org 0x0000
                           0000D7   293 _CY	=	0x00d7
                           0000D6   294 _AC	=	0x00d6
                           0000D5   295 _F0	=	0x00d5
                           0000D4   296 _RS1	=	0x00d4
                           0000D3   297 _RS0	=	0x00d3
                           0000D2   298 _OV	=	0x00d2
                           0000D0   299 _P	=	0x00d0
                           0000AF   300 _EA	=	0x00af
                           0000AD   301 _ET2	=	0x00ad
                           0000AC   302 _ES	=	0x00ac
                           0000AB   303 _ET1	=	0x00ab
                           0000AA   304 _EX1	=	0x00aa
                           0000A9   305 _ET0	=	0x00a9
                           0000A8   306 _EX0	=	0x00a8
                           0000BF   307 _PX3	=	0x00bf
                           0000BE   308 _PX2	=	0x00be
                           0000BD   309 _PT2	=	0x00bd
                           0000BC   310 _PS	=	0x00bc
                           0000BB   311 _PT1	=	0x00bb
                           0000BA   312 _PX1	=	0x00ba
                           0000B9   313 _PT0	=	0x00b9
                           0000B8   314 _PX0	=	0x00b8
                           00009F   315 _SM0	=	0x009f
                           00009E   316 _SM1	=	0x009e
                           00009D   317 _SM2	=	0x009d
                           00009C   318 _REN	=	0x009c
                           00009B   319 _TB8	=	0x009b
                           00009A   320 _RB8	=	0x009a
                           000099   321 _TI	=	0x0099
                           000098   322 _RI	=	0x0098
                           00009F   323 _FE	=	0x009f
                           00008F   324 _TF1	=	0x008f
                           00008E   325 _TR1	=	0x008e
                           00008D   326 _TF0	=	0x008d
                           00008C   327 _TR0	=	0x008c
                           00008B   328 _IE1	=	0x008b
                           00008A   329 _IT1	=	0x008a
                           000089   330 _IE0	=	0x0089
                           000088   331 _IT0	=	0x0088
                           0000CF   332 _TF2	=	0x00cf
                           0000CE   333 _EXF2	=	0x00ce
                           0000CD   334 _RCLK	=	0x00cd
                           0000CC   335 _TCLK	=	0x00cc
                           0000CB   336 _EXEN2	=	0x00cb
                           0000CA   337 _TR2	=	0x00ca
                           0000C9   338 _C_T2	=	0x00c9
                           0000C8   339 _CP_RL2	=	0x00c8
                           0000C7   340 _IL3	=	0x00c7
                           0000C6   341 _EX3	=	0x00c6
                           0000C5   342 _IE3	=	0x00c5
                           0000C4   343 _IT3	=	0x00c4
                           0000C3   344 _IL2	=	0x00c3
                           0000C2   345 _EX2	=	0x00c2
                           0000C1   346 _IE2	=	0x00c1
                           0000C0   347 _IT2	=	0x00c0
                           0000FF   348 _CR2	=	0x00ff
                           0000FE   349 _ENSI	=	0x00fe
                           0000FD   350 _STA	=	0x00fd
                           0000FC   351 _STO	=	0x00fc
                           0000FB   352 _SI	=	0x00fb
                           0000FA   353 _AA	=	0x00fa
                           0000F9   354 _CR1	=	0x00f9
                           0000F8   355 _CR0	=	0x00f8
                           000087   356 _P07	=	0x0087
                           000086   357 _P06	=	0x0086
                           000085   358 _P05	=	0x0085
                           000084   359 _P04	=	0x0084
                           000083   360 _P03	=	0x0083
                           000082   361 _P02	=	0x0082
                           000081   362 _P01	=	0x0081
                           000080   363 _P00	=	0x0080
                           000097   364 _P17	=	0x0097
                           000096   365 _P16	=	0x0096
                           000095   366 _P15	=	0x0095
                           000094   367 _P14	=	0x0094
                           000093   368 _P13	=	0x0093
                           000092   369 _P12	=	0x0092
                           000091   370 _P11	=	0x0091
                           000090   371 _P10	=	0x0090
                           0000A7   372 _P27	=	0x00a7
                           0000A6   373 _P26	=	0x00a6
                           0000A5   374 _P25	=	0x00a5
                           0000A4   375 _P24	=	0x00a4
                           0000A3   376 _P23	=	0x00a3
                           0000A2   377 _P22	=	0x00a2
                           0000A1   378 _P21	=	0x00a1
                           0000A0   379 _P20	=	0x00a0
                           0000B7   380 _P37	=	0x00b7
                           0000B6   381 _P36	=	0x00b6
                           0000B5   382 _P35	=	0x00b5
                           0000B4   383 _P34	=	0x00b4
                           0000B3   384 _P33	=	0x00b3
                           0000B2   385 _P32	=	0x00b2
                           0000B1   386 _P31	=	0x00b1
                           0000B0   387 _P30	=	0x00b0
                           0000EB   388 _P43	=	0x00eb
                           0000EA   389 _P42	=	0x00ea
                           0000E9   390 _P41	=	0x00e9
                           0000E8   391 _P40	=	0x00e8
                           000091   392 _T2EX	=	0x0091
                           000090   393 _T2	=	0x0090
                           0000A7   394 _SPI_CLK	=	0x00a7
                           0000A6   395 _SPI_MISO	=	0x00a6
                           0000A5   396 _SPI_MOSI	=	0x00a5
                           0000A4   397 _SPI_SS	=	0x00a4
                           0000A1   398 _I2C_SDA	=	0x00a1
                           0000A0   399 _I2C_SCL	=	0x00a0
                           0000B7   400 _RD	=	0x00b7
                           0000B6   401 _WR	=	0x00b6
                           0000B5   402 _T1	=	0x00b5
                           0000B4   403 _T0	=	0x00b4
                           0000B3   404 _INT1	=	0x00b3
                           0000B2   405 _INT0	=	0x00b2
                           0000B1   406 _TXD	=	0x00b1
                           0000B0   407 _RXD	=	0x00b0
                           0000B7   408 _INT3	=	0x00b7
                           0000B6   409 _INT2	=	0x00b6
                                    410 ;--------------------------------------------------------
                                    411 ; overlayable register banks
                                    412 ;--------------------------------------------------------
                                    413 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        414 	.ds 8
                                    415 ;--------------------------------------------------------
                                    416 ; internal ram data
                                    417 ;--------------------------------------------------------
                                    418 	.area DSEG    (DATA)
                           000020   419 _LED_STATUS	=	0x0020
      000000                        420 _activeKeys::
      000000                        421 	.ds 24
      000018                        422 _downCount::
      000018                        423 	.ds 1
      000019                        424 _ToHost::
      000019                        425 	.ds 8
      000021                        426 _prtHex_buf_65536_28:
      000021                        427 	.ds 8
      000029                        428 _msg_buf_65536_45:
      000029                        429 	.ds 8
      000031                        430 _sendKeyReport_buf_65536_50:
      000031                        431 	.ds 3
      000034                        432 _sendKeys_prevDownCount_65536_54:
      000034                        433 	.ds 1
      000035                        434 _sendKeys_alternateKeyPending_65536_54:
      000035                        435 	.ds 1
      000036                        436 _sendKeys_mod_65536_54:
      000036                        437 	.ds 1
      000037                        438 _sendKeys_layer_65536_54:
      000037                        439 	.ds 2
      000039                        440 _sendKeys_HostIndex_65536_54:
      000039                        441 	.ds 1
      00003A                        442 _sendKeys_sloc0_1_0:
      00003A                        443 	.ds 1
                                    444 ;--------------------------------------------------------
                                    445 ; overlayable items in internal ram 
                                    446 ;--------------------------------------------------------
                                    447 	.area	OSEG    (OVR,DATA)
      000000                        448 _clr_PARM_2:
      000000                        449 	.ds 1
                                    450 	.area	OSEG    (OVR,DATA)
                                    451 	.area	OSEG    (OVR,DATA)
      000000                        452 _updateActiveKeys_mask_65536_68:
      000000                        453 	.ds 1
      000001                        454 _updateActiveKeys_keyState_65536_68:
      000001                        455 	.ds 1
      000002                        456 _updateActiveKeys_keyChanges_65536_68:
      000002                        457 	.ds 1
      000003                        458 _updateActiveKeys_sloc0_1_0:
      000003                        459 	.ds 3
      000006                        460 _updateActiveKeys_sloc1_1_0:
      000006                        461 	.ds 3
                                    462 	.area	OSEG    (OVR,DATA)
      000000                        463 _addActiveKey_PARM_2:
      000000                        464 	.ds 1
      000001                        465 _addActiveKey_kp_65536_79:
      000001                        466 	.ds 3
      000004                        467 _addActiveKey_sloc0_1_0:
      000004                        468 	.ds 3
                                    469 ;--------------------------------------------------------
                                    470 ; indirectly addressable internal ram data
                                    471 ;--------------------------------------------------------
                                    472 	.area ISEG    (DATA)
      000000                        473 _allKeys::
      000000                        474 	.ds 18
                                    475 ;--------------------------------------------------------
                                    476 ; absolute internal ram data
                                    477 ;--------------------------------------------------------
                                    478 	.area IABS    (ABS,DATA)
                                    479 	.area IABS    (ABS,DATA)
                                    480 ;--------------------------------------------------------
                                    481 ; bit data
                                    482 ;--------------------------------------------------------
                                    483 	.area BSEG    (BIT)
                           000020   484 _NumLock	=	0x0020
                           000021   485 _Caps	=	0x0021
                           000022   486 _ScrollLock	=	0x0022
                                    487 ;--------------------------------------------------------
                                    488 ; paged external ram data
                                    489 ;--------------------------------------------------------
                                    490 	.area PSEG    (PAG,XDATA)
                                    491 ;--------------------------------------------------------
                                    492 ; external ram data
                                    493 ;--------------------------------------------------------
                                    494 	.area XSEG    (XDATA)
                                    495 ;--------------------------------------------------------
                                    496 ; absolute external ram data
                                    497 ;--------------------------------------------------------
                                    498 	.area XABS    (ABS,XDATA)
                                    499 ;--------------------------------------------------------
                                    500 ; external initialized ram data
                                    501 ;--------------------------------------------------------
                                    502 	.area XISEG   (XDATA)
                                    503 	.area HOME    (CODE)
                                    504 	.area GSINIT0 (CODE)
                                    505 	.area GSINIT1 (CODE)
                                    506 	.area GSINIT2 (CODE)
                                    507 	.area GSINIT3 (CODE)
                                    508 	.area GSINIT4 (CODE)
                                    509 	.area GSINIT5 (CODE)
                                    510 	.area GSINIT  (CODE)
                                    511 	.area GSFINAL (CODE)
                                    512 	.area CSEG    (CODE)
                                    513 ;--------------------------------------------------------
                                    514 ; global & static initialisations
                                    515 ;--------------------------------------------------------
                                    516 	.area HOME    (CODE)
                                    517 	.area GSINIT  (CODE)
                                    518 	.area GSFINAL (CODE)
                                    519 	.area GSINIT  (CODE)
                                    520 ;------------------------------------------------------------
                                    521 ;Allocation info for local variables in function 'sendKeys'
                                    522 ;------------------------------------------------------------
                                    523 ;prevDownCount             Allocated with name '_sendKeys_prevDownCount_65536_54'
                                    524 ;alternateKeyPending       Allocated with name '_sendKeys_alternateKeyPending_65536_54'
                                    525 ;offset                    Allocated to registers r7 
                                    526 ;index                     Allocated to registers 
                                    527 ;hidCode                   Allocated to registers r6 
                                    528 ;mod                       Allocated with name '_sendKeys_mod_65536_54'
                                    529 ;layer                     Allocated with name '_sendKeys_layer_65536_54'
                                    530 ;kp                        Allocated to registers 
                                    531 ;HostIndex                 Allocated with name '_sendKeys_HostIndex_65536_54'
                                    532 ;sloc0                     Allocated with name '_sendKeys_sloc0_1_0'
                                    533 ;------------------------------------------------------------
                                    534 ;	keyboard.c:203: static BYTE prevDownCount = 0;
      000000 75*34 00         [24]  535 	mov	_sendKeys_prevDownCount_65536_54,#0x00
                                    536 ;	keyboard.c:205: static BYTE alternateKeyPending = 0;
      000003 75*35 00         [24]  537 	mov	_sendKeys_alternateKeyPending_65536_54,#0x00
                                    538 ;	keyboard.c:46: char downCount=0;		// number of keys DOWN
      000006 75*18 00         [24]  539 	mov	_downCount,#0x00
                                    540 ;--------------------------------------------------------
                                    541 ; Home
                                    542 ;--------------------------------------------------------
                                    543 	.area HOME    (CODE)
                                    544 	.area HOME    (CODE)
                                    545 ;--------------------------------------------------------
                                    546 ; code
                                    547 ;--------------------------------------------------------
                                    548 	.area CSEG    (CODE)
                                    549 ;------------------------------------------------------------
                                    550 ;Allocation info for local variables in function 'clr'
                                    551 ;------------------------------------------------------------
                                    552 ;len                       Allocated with name '_clr_PARM_2'
                                    553 ;buf                       Allocated to registers r5 r6 r7 
                                    554 ;cp                        Allocated to registers r5 r6 r7 
                                    555 ;------------------------------------------------------------
                                    556 ;	keyboard.c:49: void clr(BYTE *buf, BYTE len) {
                                    557 ;	-----------------------------------------
                                    558 ;	 function clr
                                    559 ;	-----------------------------------------
      000000                        560 _clr:
                           000007   561 	ar7 = 0x07
                           000006   562 	ar6 = 0x06
                           000005   563 	ar5 = 0x05
                           000004   564 	ar4 = 0x04
                           000003   565 	ar3 = 0x03
                           000002   566 	ar2 = 0x02
                           000001   567 	ar1 = 0x01
                           000000   568 	ar0 = 0x00
      000000 AD 82            [24]  569 	mov	r5,dpl
      000002 AE 83            [24]  570 	mov	r6,dph
      000004 AF F0            [24]  571 	mov	r7,b
                                    572 ;	keyboard.c:52: for(cp = buf; cp < buf+len; cp++) {
      000006 E5*00            [12]  573 	mov	a,_clr_PARM_2
      000008 2D               [12]  574 	add	a,r5
      000009 FA               [12]  575 	mov	r2,a
      00000A E4               [12]  576 	clr	a
      00000B 3E               [12]  577 	addc	a,r6
      00000C FB               [12]  578 	mov	r3,a
      00000D 8F 04            [24]  579 	mov	ar4,r7
      00000F                        580 00103$:
      00000F C0 02            [24]  581 	push	ar2
      000011 C0 03            [24]  582 	push	ar3
      000013 C0 04            [24]  583 	push	ar4
      000015 8D 82            [24]  584 	mov	dpl,r5
      000017 8E 83            [24]  585 	mov	dph,r6
      000019 8F F0            [24]  586 	mov	b,r7
      00001B 12r00r00         [24]  587 	lcall	___gptr_cmp
      00001E 15 81            [12]  588 	dec	sp
      000020 15 81            [12]  589 	dec	sp
      000022 15 81            [12]  590 	dec	sp
      000024 50 11            [24]  591 	jnc	00105$
                                    592 ;	keyboard.c:53: *cp = 0;	
      000026 8D 82            [24]  593 	mov	dpl,r5
      000028 8E 83            [24]  594 	mov	dph,r6
      00002A 8F F0            [24]  595 	mov	b,r7
      00002C E4               [12]  596 	clr	a
      00002D 12r00r00         [24]  597 	lcall	__gptrput
      000030 A3               [24]  598 	inc	dptr
      000031 AD 82            [24]  599 	mov	r5,dpl
      000033 AE 83            [24]  600 	mov	r6,dph
                                    601 ;	keyboard.c:52: for(cp = buf; cp < buf+len; cp++) {
      000035 80 D8            [24]  602 	sjmp	00103$
      000037                        603 00105$:
                                    604 ;	keyboard.c:55: }
      000037 22               [24]  605 	ret
                                    606 ;------------------------------------------------------------
                                    607 ;Allocation info for local variables in function 'prtHex'
                                    608 ;------------------------------------------------------------
                                    609 ;n                         Allocated to registers r7 
                                    610 ;hi                        Allocated to registers r6 
                                    611 ;lo                        Allocated to registers r7 
                                    612 ;buf                       Allocated with name '_prtHex_buf_65536_28'
                                    613 ;------------------------------------------------------------
                                    614 ;	keyboard.c:61: void prtHex(BYTE n) {
                                    615 ;	-----------------------------------------
                                    616 ;	 function prtHex
                                    617 ;	-----------------------------------------
      000038                        618 _prtHex:
                                    619 ;	keyboard.c:64: BYTE hi = n >> 4;
      000038 E5 82            [12]  620 	mov	a,dpl
      00003A FF               [12]  621 	mov	r7,a
      00003B C4               [12]  622 	swap	a
      00003C 54 0F            [12]  623 	anl	a,#0x0f
      00003E FE               [12]  624 	mov	r6,a
                                    625 ;	keyboard.c:65: BYTE lo = n & 0xf;
      00003F 53 07 0F         [24]  626 	anl	ar7,#0x0f
                                    627 ;	keyboard.c:67: clr(buf, 8);
      000042 75*00 08         [24]  628 	mov	_clr_PARM_2,#0x08
      000045 90r00r21         [24]  629 	mov	dptr,#_prtHex_buf_65536_28
      000048 75 F0 40         [24]  630 	mov	b,#0x40
      00004B C0 07            [24]  631 	push	ar7
      00004D C0 06            [24]  632 	push	ar6
      00004F 12r00r00         [24]  633 	lcall	_clr
      000052 D0 06            [24]  634 	pop	ar6
      000054 D0 07            [24]  635 	pop	ar7
                                    636 ;	keyboard.c:69: buf[2] = hexTab[hi];
      000056 EE               [12]  637 	mov	a,r6
      000057 90r00r00         [24]  638 	mov	dptr,#_prtHex_hexTab_65536_28
      00005A 93               [24]  639 	movc	a,@a+dptr
      00005B FE               [12]  640 	mov	r6,a
      00005C 8E*23            [24]  641 	mov	(_prtHex_buf_65536_28 + 0x0002),r6
                                    642 ;	keyboard.c:70: buf[3] = hexTab[lo];
      00005E EF               [12]  643 	mov	a,r7
      00005F 90r00r00         [24]  644 	mov	dptr,#_prtHex_hexTab_65536_28
      000062 93               [24]  645 	movc	a,@a+dptr
      000063 FF               [12]  646 	mov	r7,a
      000064 8F*24            [24]  647 	mov	(_prtHex_buf_65536_28 + 0x0003),r7
                                    648 ;	keyboard.c:71: sendKeyReport(buf);
      000066 90r00r21         [24]  649 	mov	dptr,#_prtHex_buf_65536_28
      000069 75 F0 40         [24]  650 	mov	b,#0x40
      00006C 12r01rB4         [24]  651 	lcall	_sendKeyReport
                                    652 ;	keyboard.c:72: clr(buf, 8);
      00006F 75*00 08         [24]  653 	mov	_clr_PARM_2,#0x08
      000072 90r00r21         [24]  654 	mov	dptr,#_prtHex_buf_65536_28
      000075 75 F0 40         [24]  655 	mov	b,#0x40
      000078 12r00r00         [24]  656 	lcall	_clr
                                    657 ;	keyboard.c:73: sendKeyReport(buf);
      00007B 90r00r21         [24]  658 	mov	dptr,#_prtHex_buf_65536_28
      00007E 75 F0 40         [24]  659 	mov	b,#0x40
                                    660 ;	keyboard.c:74: }
      000081 02r01rB4         [24]  661 	ljmp	_sendKeyReport
                                    662 ;------------------------------------------------------------
                                    663 ;Allocation info for local variables in function 'initKeyboard'
                                    664 ;------------------------------------------------------------
                                    665 ;kp                        Allocated to registers 
                                    666 ;------------------------------------------------------------
                                    667 ;	keyboard.c:76: void initKeyboard( void ) { 
                                    668 ;	-----------------------------------------
                                    669 ;	 function initKeyboard
                                    670 ;	-----------------------------------------
      000084                        671 _initKeyboard:
                                    672 ;	keyboard.c:77: KBPATN = 0xFF;
      000084 75 D5 FF         [24]  673 	mov	_KBPATN,#0xff
                                    674 ;	keyboard.c:78: KBCON = 0x00;
      000087 75 D6 00         [24]  675 	mov	_KBCON,#0x00
                                    676 ;	keyboard.c:79: KBMASK = 0x00;                               // Will Disable KP Interrupt
      00008A 75 D7 00         [24]  677 	mov	_KBMASK,#0x00
                                    678 ;	keyboard.c:81: LED_STATUS = 0x00;                           // Default LED off
      00008D 75 20 00         [24]  679 	mov	_LED_STATUS,#0x00
                                    680 ;	keyboard.c:82: ScrollLock = 0;
                                    681 ;	assignBit
      000090 C2 22            [12]  682 	clr	_ScrollLock
                                    683 ;	keyboard.c:83: Caps = 0;
                                    684 ;	assignBit
      000092 C2 21            [12]  685 	clr	_Caps
                                    686 ;	keyboard.c:84: NumLock = 0;
                                    687 ;	assignBit
      000094 C2 20            [12]  688 	clr	_NumLock
                                    689 ;	keyboard.c:85: TxBusy = CLR;                           // SET when pass key code to host
      000096 75*00 00         [24]  690 	mov	_TxBusy,#0x00
                                    691 ;	keyboard.c:87: downCount = 0;
      000099 75*18 00         [24]  692 	mov	_downCount,#0x00
                                    693 ;	keyboard.c:90: for(kp = activeKeys; kp < activeKeys+MAX_ROLLOVER; kp++) {
      00009C 7Dr00            [12]  694 	mov	r5,#_activeKeys
      00009E 7E 00            [12]  695 	mov	r6,#0x00
      0000A0 7F 40            [12]  696 	mov	r7,#0x40
      0000A2                        697 00103$:
      0000A2 74r18            [12]  698 	mov	a,#(_activeKeys + 0x0018)
      0000A4 C0 E0            [24]  699 	push	acc
      0000A6 74s00            [12]  700 	mov	a,#((_activeKeys + 0x0018) >> 8)
      0000A8 C0 E0            [24]  701 	push	acc
      0000AA 74 40            [12]  702 	mov	a,#0x40
      0000AC C0 E0            [24]  703 	push	acc
      0000AE 8D 82            [24]  704 	mov	dpl,r5
      0000B0 8E 83            [24]  705 	mov	dph,r6
      0000B2 8F F0            [24]  706 	mov	b,r7
      0000B4 12r00r00         [24]  707 	lcall	___gptr_cmp
      0000B7 15 81            [12]  708 	dec	sp
      0000B9 15 81            [12]  709 	dec	sp
      0000BB 15 81            [12]  710 	dec	sp
      0000BD 50 1C            [24]  711 	jnc	00101$
                                    712 ;	keyboard.c:91: kp->state = FREE;
      0000BF 74 02            [12]  713 	mov	a,#0x02
      0000C1 2D               [12]  714 	add	a,r5
      0000C2 FA               [12]  715 	mov	r2,a
      0000C3 E4               [12]  716 	clr	a
      0000C4 3E               [12]  717 	addc	a,r6
      0000C5 FB               [12]  718 	mov	r3,a
      0000C6 8F 04            [24]  719 	mov	ar4,r7
      0000C8 8A 82            [24]  720 	mov	dpl,r2
      0000CA 8B 83            [24]  721 	mov	dph,r3
      0000CC 8C F0            [24]  722 	mov	b,r4
      0000CE E4               [12]  723 	clr	a
      0000CF 12r00r00         [24]  724 	lcall	__gptrput
                                    725 ;	keyboard.c:90: for(kp = activeKeys; kp < activeKeys+MAX_ROLLOVER; kp++) {
      0000D2 74 04            [12]  726 	mov	a,#0x04
      0000D4 2D               [12]  727 	add	a,r5
      0000D5 FD               [12]  728 	mov	r5,a
      0000D6 E4               [12]  729 	clr	a
      0000D7 3E               [12]  730 	addc	a,r6
      0000D8 FE               [12]  731 	mov	r6,a
      0000D9 80 C7            [24]  732 	sjmp	00103$
      0000DB                        733 00101$:
                                    734 ;	keyboard.c:93: clr((BYTE *)ToHost, 8);
      0000DB 7Dr19            [12]  735 	mov	r5,#_ToHost
      0000DD 7E 00            [12]  736 	mov	r6,#0x00
      0000DF 7F 40            [12]  737 	mov	r7,#0x40
      0000E1 75*00 08         [24]  738 	mov	_clr_PARM_2,#0x08
      0000E4 8D 82            [24]  739 	mov	dpl,r5
      0000E6 8E 83            [24]  740 	mov	dph,r6
      0000E8 8F F0            [24]  741 	mov	b,r7
      0000EA 12r00r00         [24]  742 	lcall	_clr
                                    743 ;	keyboard.c:94: NumLock_LED = 1;
                                    744 ;	assignBit
      0000ED D2 B5            [12]  745 	setb	_P35
                                    746 ;	keyboard.c:95: }
      0000EF 22               [24]  747 	ret
                                    748 ;------------------------------------------------------------
                                    749 ;Allocation info for local variables in function 'KB_LED_Off'
                                    750 ;------------------------------------------------------------
                                    751 ;	keyboard.c:98: void KB_LED_Off( void ) { 
                                    752 ;	-----------------------------------------
                                    753 ;	 function KB_LED_Off
                                    754 ;	-----------------------------------------
      0000F0                        755 _KB_LED_Off:
                                    756 ;	keyboard.c:99: NumLock_LED = SET;
                                    757 ;	assignBit
      0000F0 D2 B5            [12]  758 	setb	_P35
                                    759 ;	keyboard.c:100: Caps_LED = SET;
                                    760 ;	assignBit
      0000F2 D2 B6            [12]  761 	setb	_P36
                                    762 ;	keyboard.c:101: ScrollLock_LED = SET;
                                    763 ;	assignBit
      0000F4 D2 B7            [12]  764 	setb	_P37
                                    765 ;	keyboard.c:102: }
      0000F6 22               [24]  766 	ret
                                    767 ;------------------------------------------------------------
                                    768 ;Allocation info for local variables in function 'KB_LED_Status'
                                    769 ;------------------------------------------------------------
                                    770 ;	keyboard.c:105: void KB_LED_Status( void ) { 
                                    771 ;	-----------------------------------------
                                    772 ;	 function KB_LED_Status
                                    773 ;	-----------------------------------------
      0000F7                        774 _KB_LED_Status:
                                    775 ;	keyboard.c:106: NumLock_LED = 0;
                                    776 ;	assignBit
      0000F7 C2 B5            [12]  777 	clr	_P35
                                    778 ;	keyboard.c:107: NumLock_LED = ~NumLock;
                                    779 ;	assignBit
      0000F9 D2 B5            [12]  780 	setb	_P35
                                    781 ;	keyboard.c:108: Caps_LED = ~Caps;
                                    782 ;	assignBit
      0000FB D2 B6            [12]  783 	setb	_P36
                                    784 ;	keyboard.c:109: ScrollLock_LED = ~ScrollLock;
                                    785 ;	assignBit
      0000FD D2 B7            [12]  786 	setb	_P37
                                    787 ;	keyboard.c:110: }
      0000FF 22               [24]  788 	ret
                                    789 ;------------------------------------------------------------
                                    790 ;Allocation info for local variables in function 'delayMicroSec'
                                    791 ;------------------------------------------------------------
                                    792 ;microSec                  Allocated to registers 
                                    793 ;------------------------------------------------------------
                                    794 ;	keyboard.c:112: void delayMicroSec(BYTE microSec) { 
                                    795 ;	-----------------------------------------
                                    796 ;	 function delayMicroSec
                                    797 ;	-----------------------------------------
      000100                        798 _delayMicroSec:
      000100 AF 82            [24]  799 	mov	r7,dpl
      000102                        800 00103$:
                                    801 ;	keyboard.c:113: for (;microSec != 0; microSec--) { 
      000102 EF               [12]  802 	mov	a,r7
      000103 60 04            [24]  803 	jz	00105$
                                    804 ;	keyboard.c:116: __endasm;
      000105 00               [12]  805 	nop
                                    806 ;	keyboard.c:113: for (;microSec != 0; microSec--) { 
      000106 1F               [12]  807 	dec	r7
      000107 80 F9            [24]  808 	sjmp	00103$
      000109                        809 00105$:
                                    810 ;	keyboard.c:118: }
      000109 22               [24]  811 	ret
                                    812 ;------------------------------------------------------------
                                    813 ;Allocation info for local variables in function 'read_column'
                                    814 ;------------------------------------------------------------
                                    815 ;Scan_index                Allocated to registers r7 
                                    816 ;scanValue                 Allocated to registers 
                                    817 ;------------------------------------------------------------
                                    818 ;	keyboard.c:121: BYTE read_column( BYTE Scan_index ) { 
                                    819 ;	-----------------------------------------
                                    820 ;	 function read_column
                                    821 ;	-----------------------------------------
      00010A                        822 _read_column:
                                    823 ;	keyboard.c:132: P1 = KeyScan_Table[Scan_index][0];
      00010A E5 82            [12]  824 	mov	a,dpl
      00010C 75 F0 03         [24]  825 	mov	b,#0x03
      00010F A4               [48]  826 	mul	ab
      000110 24r10            [12]  827 	add	a,#_read_column_KeyScan_Table_65536_43
      000112 FE               [12]  828 	mov	r6,a
      000113 74s00            [12]  829 	mov	a,#(_read_column_KeyScan_Table_65536_43 >> 8)
      000115 35 F0            [12]  830 	addc	a,b
      000117 FF               [12]  831 	mov	r7,a
      000118 8E 82            [24]  832 	mov	dpl,r6
      00011A 8F 83            [24]  833 	mov	dph,r7
      00011C E4               [12]  834 	clr	a
      00011D 93               [24]  835 	movc	a,@a+dptr
      00011E F5 90            [12]  836 	mov	_P1,a
                                    837 ;	keyboard.c:133: P2 = KeyScan_Table[Scan_index][1];
      000120 8E 82            [24]  838 	mov	dpl,r6
      000122 8F 83            [24]  839 	mov	dph,r7
      000124 A3               [24]  840 	inc	dptr
      000125 E4               [12]  841 	clr	a
      000126 93               [24]  842 	movc	a,@a+dptr
      000127 F5 A0            [12]  843 	mov	_P2,a
                                    844 ;	keyboard.c:134: P3 = P3&KeyScan_Table[Scan_index][2];
      000129 8E 82            [24]  845 	mov	dpl,r6
      00012B 8F 83            [24]  846 	mov	dph,r7
      00012D A3               [24]  847 	inc	dptr
      00012E A3               [24]  848 	inc	dptr
      00012F E4               [12]  849 	clr	a
      000130 93               [24]  850 	movc	a,@a+dptr
      000131 52 B0            [12]  851 	anl	_P3,a
                                    852 ;	keyboard.c:136: delayMicroSec( 10 );
      000133 75 82 0A         [24]  853 	mov	dpl,#0x0a
      000136 12r01r00         [24]  854 	lcall	_delayMicroSec
                                    855 ;	keyboard.c:138: scanValue = P0;                            // 1101,1111 -> 0 for Key " PRESS "
                                    856 ;	keyboard.c:139: scanValue = ~scanValue;                  // 0010,0000
      000139 E5 80            [12]  857 	mov	a,_P0
      00013B F4               [12]  858 	cpl	a
      00013C F5 82            [12]  859 	mov	dpl,a
                                    860 ;	keyboard.c:141: P1 = 0xFF;
      00013E 75 90 FF         [24]  861 	mov	_P1,#0xff
                                    862 ;	keyboard.c:142: P2 = 0xFF;
      000141 75 A0 FF         [24]  863 	mov	_P2,#0xff
                                    864 ;	keyboard.c:143: P3 = P3|0x18;
      000144 43 B0 18         [24]  865 	orl	_P3,#0x18
                                    866 ;	keyboard.c:145: return scanValue;
                                    867 ;	keyboard.c:146: }
      000147 22               [24]  868 	ret
                                    869 ;------------------------------------------------------------
                                    870 ;Allocation info for local variables in function 'msg'
                                    871 ;------------------------------------------------------------
                                    872 ;m                         Allocated to registers r7 
                                    873 ;buf                       Allocated with name '_msg_buf_65536_45'
                                    874 ;------------------------------------------------------------
                                    875 ;	keyboard.c:149: void msg(BYTE m) {
                                    876 ;	-----------------------------------------
                                    877 ;	 function msg
                                    878 ;	-----------------------------------------
      000148                        879 _msg:
      000148 AF 82            [24]  880 	mov	r7,dpl
                                    881 ;	keyboard.c:152: clr(buf, 8);
      00014A 75*00 08         [24]  882 	mov	_clr_PARM_2,#0x08
      00014D 90r00r29         [24]  883 	mov	dptr,#_msg_buf_65536_45
      000150 75 F0 40         [24]  884 	mov	b,#0x40
      000153 C0 07            [24]  885 	push	ar7
      000155 12r00r00         [24]  886 	lcall	_clr
      000158 D0 07            [24]  887 	pop	ar7
                                    888 ;	keyboard.c:153: if(m >= 'a' && m <=	'z') {
      00015A BF 61 00         [24]  889 	cjne	r7,#0x61,00145$
      00015D                        890 00145$:
      00015D 40 0E            [24]  891 	jc	00112$
      00015F EF               [12]  892 	mov	a,r7
      000160 24 85            [12]  893 	add	a,#0xff - 0x7a
      000162 40 09            [24]  894 	jc	00112$
                                    895 ;	keyboard.c:154: buf[2] = m-'a'+_A;	
      000164 8F 06            [24]  896 	mov	ar6,r7
      000166 74 A3            [12]  897 	mov	a,#0xa3
      000168 2E               [12]  898 	add	a,r6
      000169 F5*2B            [12]  899 	mov	(_msg_buf_65536_45 + 0x0002),a
      00016B 80 2F            [24]  900 	sjmp	00113$
      00016D                        901 00112$:
                                    902 ;	keyboard.c:155: } else if(m >= 'A' && m <= 'Z') {
      00016D BF 41 00         [24]  903 	cjne	r7,#0x41,00148$
      000170                        904 00148$:
      000170 40 11            [24]  905 	jc	00108$
      000172 EF               [12]  906 	mov	a,r7
      000173 24 A5            [12]  907 	add	a,#0xff - 0x5a
      000175 40 0C            [24]  908 	jc	00108$
                                    909 ;	keyboard.c:156: buf[2] = m-'A'+_A;
      000177 8F 06            [24]  910 	mov	ar6,r7
      000179 74 C3            [12]  911 	mov	a,#0xc3
      00017B 2E               [12]  912 	add	a,r6
      00017C F5*2B            [12]  913 	mov	(_msg_buf_65536_45 + 0x0002),a
                                    914 ;	keyboard.c:157: buf[0] = KEY_MOD_LSHIFT;
      00017E 75*29 02         [24]  915 	mov	_msg_buf_65536_45,#0x02
      000181 80 19            [24]  916 	sjmp	00113$
      000183                        917 00108$:
                                    918 ;	keyboard.c:158: } else if(m >= '1' && m <= '9') {
      000183 BF 31 00         [24]  919 	cjne	r7,#0x31,00151$
      000186                        920 00151$:
      000186 40 0E            [24]  921 	jc	00104$
      000188 EF               [12]  922 	mov	a,r7
      000189 24 C6            [12]  923 	add	a,#0xff - 0x39
      00018B 40 09            [24]  924 	jc	00104$
                                    925 ;	keyboard.c:159: buf[2] = m - '1' + _1;
      00018D 8F 06            [24]  926 	mov	ar6,r7
      00018F 74 ED            [12]  927 	mov	a,#0xed
      000191 2E               [12]  928 	add	a,r6
      000192 F5*2B            [12]  929 	mov	(_msg_buf_65536_45 + 0x0002),a
      000194 80 06            [24]  930 	sjmp	00113$
      000196                        931 00104$:
                                    932 ;	keyboard.c:160: } else if(m == ' ') {
      000196 BF 20 03         [24]  933 	cjne	r7,#0x20,00113$
                                    934 ;	keyboard.c:161: buf[2] = _SPACE;	
      000199 75*2B 2C         [24]  935 	mov	(_msg_buf_65536_45 + 0x0002),#0x2c
      00019C                        936 00113$:
                                    937 ;	keyboard.c:164: sendKeyReport(buf);
      00019C 90r00r29         [24]  938 	mov	dptr,#_msg_buf_65536_45
      00019F 75 F0 40         [24]  939 	mov	b,#0x40
      0001A2 12r01rB4         [24]  940 	lcall	_sendKeyReport
                                    941 ;	keyboard.c:165: buf[0] = 0;
      0001A5 75*29 00         [24]  942 	mov	_msg_buf_65536_45,#0x00
                                    943 ;	keyboard.c:166: buf[2] = 0;
      0001A8 75*2B 00         [24]  944 	mov	(_msg_buf_65536_45 + 0x0002),#0x00
                                    945 ;	keyboard.c:167: sendKeyReport(buf);
      0001AB 90r00r29         [24]  946 	mov	dptr,#_msg_buf_65536_45
      0001AE 75 F0 40         [24]  947 	mov	b,#0x40
                                    948 ;	keyboard.c:169: }
      0001B1 02r01rB4         [24]  949 	ljmp	_sendKeyReport
                                    950 ;------------------------------------------------------------
                                    951 ;Allocation info for local variables in function 'sendKeyReport'
                                    952 ;------------------------------------------------------------
                                    953 ;buf                       Allocated with name '_sendKeyReport_buf_65536_50'
                                    954 ;i                         Allocated to registers r4 
                                    955 ;------------------------------------------------------------
                                    956 ;	keyboard.c:171: void sendKeyReport(BYTE *buf) { 
                                    957 ;	-----------------------------------------
                                    958 ;	 function sendKeyReport
                                    959 ;	-----------------------------------------
      0001B4                        960 _sendKeyReport:
      0001B4 85 82*31         [24]  961 	mov	_sendKeyReport_buf_65536_50,dpl
      0001B7 85 83*32         [24]  962 	mov	(_sendKeyReport_buf_65536_50 + 1),dph
      0001BA 85 F0*33         [24]  963 	mov	(_sendKeyReport_buf_65536_50 + 2),b
                                    964 ;	keyboard.c:174: if(Ep0.EmuOk == CLR)
      0001BD E5*01            [12]  965 	mov	a,(_Ep0 + 0x0001)
      0001BF 70 01            [24]  966 	jnz	00102$
                                    967 ;	keyboard.c:175: return;
      0001C1 22               [24]  968 	ret
      0001C2                        969 00102$:
                                    970 ;	keyboard.c:180: EA = 0;
                                    971 ;	assignBit
      0001C2 C2 AF            [12]  972 	clr	_EA
                                    973 ;	keyboard.c:181: USB[EPINDEX] = EP1;
      0001C4 90 FF F1         [24]  974 	mov	dptr,#0xfff1
      0001C7 74 01            [12]  975 	mov	a,#0x01
      0001C9 F0               [24]  976 	movx	@dptr,a
                                    977 ;	keyboard.c:183: while(i < 8) { 
      0001CA 7C 00            [12]  978 	mov	r4,#0x00
      0001CC                        979 00103$:
      0001CC BC 08 00         [24]  980 	cjne	r4,#0x08,00133$
      0001CF                        981 00133$:
      0001CF 50 1B            [24]  982 	jnc	00105$
                                    983 ;	keyboard.c:184: USB[TXDAT] = buf[i];
      0001D1 EC               [12]  984 	mov	a,r4
      0001D2 25*31            [12]  985 	add	a,_sendKeyReport_buf_65536_50
      0001D4 FA               [12]  986 	mov	r2,a
      0001D5 E4               [12]  987 	clr	a
      0001D6 35*32            [12]  988 	addc	a,(_sendKeyReport_buf_65536_50 + 1)
      0001D8 FB               [12]  989 	mov	r3,a
      0001D9 AF*33            [24]  990 	mov	r7,(_sendKeyReport_buf_65536_50 + 2)
      0001DB 8A 82            [24]  991 	mov	dpl,r2
      0001DD 8B 83            [24]  992 	mov	dph,r3
      0001DF 8F F0            [24]  993 	mov	b,r7
      0001E1 12r00r00         [24]  994 	lcall	__gptrget
      0001E4 FA               [12]  995 	mov	r2,a
      0001E5 90 FF F3         [24]  996 	mov	dptr,#0xfff3
      0001E8 F0               [24]  997 	movx	@dptr,a
                                    998 ;	keyboard.c:185: i++;
      0001E9 0C               [12]  999 	inc	r4
      0001EA 80 E0            [24] 1000 	sjmp	00103$
      0001EC                       1001 00105$:
                                   1002 ;	keyboard.c:187: TxBusy = SET;
      0001EC 75*00 01         [24] 1003 	mov	_TxBusy,#0x01
                                   1004 ;	keyboard.c:188: USB[TXCNT] = i;
      0001EF 90 FF F6         [24] 1005 	mov	dptr,#0xfff6
      0001F2 EC               [12] 1006 	mov	a,r4
      0001F3 F0               [24] 1007 	movx	@dptr,a
                                   1008 ;	keyboard.c:189: USB[EPINDEX] = EP0;
      0001F4 90 FF F1         [24] 1009 	mov	dptr,#0xfff1
      0001F7 E4               [12] 1010 	clr	a
      0001F8 F0               [24] 1011 	movx	@dptr,a
                                   1012 ;	keyboard.c:190: EA = 1; 	
                                   1013 ;	assignBit
      0001F9 D2 AF            [12] 1014 	setb	_EA
                                   1015 ;	keyboard.c:191: while(TxBusy)
      0001FB                       1016 00106$:
      0001FB E5*00            [12] 1017 	mov	a,_TxBusy
      0001FD 70 FC            [24] 1018 	jnz	00106$
                                   1019 ;	keyboard.c:194: clr((BYTE *)buf, 8);
      0001FF 75*00 08         [24] 1020 	mov	_clr_PARM_2,#0x08
      000202 85*31 82         [24] 1021 	mov	dpl,_sendKeyReport_buf_65536_50
      000205 85*32 83         [24] 1022 	mov	dph,(_sendKeyReport_buf_65536_50 + 1)
      000208 85*33 F0         [24] 1023 	mov	b,(_sendKeyReport_buf_65536_50 + 2)
                                   1024 ;	keyboard.c:195: }
      00020B 02r00r00         [24] 1025 	ljmp	_clr
                                   1026 ;------------------------------------------------------------
                                   1027 ;Allocation info for local variables in function 'sendKeys'
                                   1028 ;------------------------------------------------------------
                                   1029 ;prevDownCount             Allocated with name '_sendKeys_prevDownCount_65536_54'
                                   1030 ;alternateKeyPending       Allocated with name '_sendKeys_alternateKeyPending_65536_54'
                                   1031 ;offset                    Allocated to registers r7 
                                   1032 ;index                     Allocated to registers 
                                   1033 ;hidCode                   Allocated to registers r6 
                                   1034 ;mod                       Allocated with name '_sendKeys_mod_65536_54'
                                   1035 ;layer                     Allocated with name '_sendKeys_layer_65536_54'
                                   1036 ;kp                        Allocated to registers 
                                   1037 ;HostIndex                 Allocated with name '_sendKeys_HostIndex_65536_54'
                                   1038 ;sloc0                     Allocated with name '_sendKeys_sloc0_1_0'
                                   1039 ;------------------------------------------------------------
                                   1040 ;	keyboard.c:197: void sendKeys()  { 
                                   1041 ;	-----------------------------------------
                                   1042 ;	 function sendKeys
                                   1043 ;	-----------------------------------------
      00020E                       1044 _sendKeys:
                                   1045 ;	keyboard.c:233: CBYTE *layer = topLayer;
      00020E 75*37r00         [24] 1046 	mov	_sendKeys_layer_65536_54,#_topLayer
      000211 75*38s00         [24] 1047 	mov	(_sendKeys_layer_65536_54 + 1),#(_topLayer >> 8)
                                   1048 ;	keyboard.c:239: if(alternateKeyPending && (downCount == 0)) {
      000214 E5*35            [12] 1049 	mov	a,_sendKeys_alternateKeyPending_65536_54
      000216 60 1B            [24] 1050 	jz	00102$
      000218 E5*18            [12] 1051 	mov	a,_downCount
                                   1052 ;	keyboard.c:240: ToHost.Normal.Code[HostIndex++] = alternateKeyPending;
                                   1053 ;	keyboard.c:241: alternateKeyPending = 0;
      00021A 70 17            [24] 1054 	jnz	00102$
      00021C 85*35*1B         [24] 1055 	mov	(_ToHost + 0x0002),_sendKeys_alternateKeyPending_65536_54
      00021F F5*35            [12] 1056 	mov	_sendKeys_alternateKeyPending_65536_54,a
                                   1057 ;	keyboard.c:243: sendKeyReport((BYTE *)&ToHost);
      000221 90r00r19         [24] 1058 	mov	dptr,#_ToHost
      000224 75 F0 40         [24] 1059 	mov	b,#0x40
      000227 12r01rB4         [24] 1060 	lcall	_sendKeyReport
                                   1061 ;	keyboard.c:245: sendKeyReport((BYTE *)&ToHost);
      00022A 90r00r19         [24] 1062 	mov	dptr,#_ToHost
      00022D 75 F0 40         [24] 1063 	mov	b,#0x40
                                   1064 ;	keyboard.c:246: return;
      000230 02r01rB4         [24] 1065 	ljmp	_sendKeyReport
      000233                       1066 00102$:
                                   1067 ;	keyboard.c:249: for(kp = activeKeys; kp < activeKeys + MAX_ROLLOVER; kp++) {
      000233 7Br00            [12] 1068 	mov	r3,#_activeKeys
      000235 7C 00            [12] 1069 	mov	r4,#0x00
      000237 7D 40            [12] 1070 	mov	r5,#0x40
                                   1071 ;	1-genFromRTrack replaced	mov	_sendKeys_HostIndex_65536_54,#0x00
      000239 8C*39            [24] 1072 	mov	_sendKeys_HostIndex_65536_54,r4
      00023B                       1073 00127$:
      00023B 74r18            [12] 1074 	mov	a,#(_activeKeys + 0x0018)
      00023D C0 E0            [24] 1075 	push	acc
      00023F 74s00            [12] 1076 	mov	a,#((_activeKeys + 0x0018) >> 8)
      000241 C0 E0            [24] 1077 	push	acc
      000243 74 40            [12] 1078 	mov	a,#0x40
      000245 C0 E0            [24] 1079 	push	acc
      000247 8B 82            [24] 1080 	mov	dpl,r3
      000249 8C 83            [24] 1081 	mov	dph,r4
      00024B 8D F0            [24] 1082 	mov	b,r5
      00024D 12r00r00         [24] 1083 	lcall	___gptr_cmp
      000250 15 81            [12] 1084 	dec	sp
      000252 15 81            [12] 1085 	dec	sp
      000254 15 81            [12] 1086 	dec	sp
      000256 40 03            [24] 1087 	jc	00198$
      000258 02r03r3C         [24] 1088 	ljmp	00125$
      00025B                       1089 00198$:
                                   1090 ;	keyboard.c:250: if(kp->state == DOWN) {
      00025B 74 02            [12] 1091 	mov	a,#0x02
      00025D 2B               [12] 1092 	add	a,r3
      00025E FA               [12] 1093 	mov	r2,a
      00025F E4               [12] 1094 	clr	a
      000260 3C               [12] 1095 	addc	a,r4
      000261 FE               [12] 1096 	mov	r6,a
      000262 8D 07            [24] 1097 	mov	ar7,r5
      000264 8A 82            [24] 1098 	mov	dpl,r2
      000266 8E 83            [24] 1099 	mov	dph,r6
      000268 8F F0            [24] 1100 	mov	b,r7
      00026A 12r00r00         [24] 1101 	lcall	__gptrget
      00026D FA               [12] 1102 	mov	r2,a
      00026E BA 01 02         [24] 1103 	cjne	r2,#0x01,00199$
      000271 80 03            [24] 1104 	sjmp	00200$
      000273                       1105 00199$:
      000273 02r03r32         [24] 1106 	ljmp	00128$
      000276                       1107 00200$:
                                   1108 ;	keyboard.c:251: index = (kp->col << 3) + kp->row;
      000276 8B 82            [24] 1109 	mov	dpl,r3
      000278 8C 83            [24] 1110 	mov	dph,r4
      00027A 8D F0            [24] 1111 	mov	b,r5
      00027C 12r00r00         [24] 1112 	lcall	__gptrget
      00027F C4               [12] 1113 	swap	a
      000280 03               [12] 1114 	rr	a
      000281 54 F8            [12] 1115 	anl	a,#0xf8
      000283 F5*3A            [12] 1116 	mov	_sendKeys_sloc0_1_0,a
      000285 74 01            [12] 1117 	mov	a,#0x01
      000287 2B               [12] 1118 	add	a,r3
      000288 FA               [12] 1119 	mov	r2,a
      000289 E4               [12] 1120 	clr	a
      00028A 3C               [12] 1121 	addc	a,r4
      00028B FE               [12] 1122 	mov	r6,a
      00028C 8D 07            [24] 1123 	mov	ar7,r5
      00028E 8A 82            [24] 1124 	mov	dpl,r2
      000290 8E 83            [24] 1125 	mov	dph,r6
      000292 8F F0            [24] 1126 	mov	b,r7
      000294 12r00r00         [24] 1127 	lcall	__gptrget
      000297 25*3A            [12] 1128 	add	a,_sendKeys_sloc0_1_0
                                   1129 ;	keyboard.c:252: offset = key_index[index];
      000299 90r00r49         [24] 1130 	mov	dptr,#_sendKeys_key_index_65536_54
      00029C 93               [24] 1131 	movc	a,@a+dptr
                                   1132 ;	keyboard.c:253: if(offset == 0) {
      00029D FF               [12] 1133 	mov	r7,a
      00029E 70 01            [24] 1134 	jnz	00105$
                                   1135 ;	keyboard.c:254: return;	
      0002A0 22               [24] 1136 	ret
      0002A1                       1137 00105$:
                                   1138 ;	keyboard.c:257: offset = (--offset) << 1;
      0002A1 1F               [12] 1139 	dec	r7
      0002A2 EF               [12] 1140 	mov	a,r7
      0002A3 2F               [12] 1141 	add	a,r7
                                   1142 ;	keyboard.c:258: hidCode = layer[offset];
      0002A4 FF               [12] 1143 	mov	r7,a
      0002A5 25*37            [12] 1144 	add	a,_sendKeys_layer_65536_54
      0002A7 F5 82            [12] 1145 	mov	dpl,a
      0002A9 E4               [12] 1146 	clr	a
      0002AA 35*38            [12] 1147 	addc	a,(_sendKeys_layer_65536_54 + 1)
      0002AC F5 83            [12] 1148 	mov	dph,a
      0002AE E4               [12] 1149 	clr	a
      0002AF 93               [24] 1150 	movc	a,@a+dptr
      0002B0 FE               [12] 1151 	mov	r6,a
                                   1152 ;	keyboard.c:259: mod = layer[offset+1];
      0002B1 7A 00            [12] 1153 	mov	r2,#0x00
      0002B3 0F               [12] 1154 	inc	r7
      0002B4 BF 00 01         [24] 1155 	cjne	r7,#0x00,00202$
      0002B7 0A               [12] 1156 	inc	r2
      0002B8                       1157 00202$:
      0002B8 EF               [12] 1158 	mov	a,r7
      0002B9 25*37            [12] 1159 	add	a,_sendKeys_layer_65536_54
      0002BB F5 82            [12] 1160 	mov	dpl,a
      0002BD EA               [12] 1161 	mov	a,r2
      0002BE 35*38            [12] 1162 	addc	a,(_sendKeys_layer_65536_54 + 1)
      0002C0 F5 83            [12] 1163 	mov	dph,a
      0002C2 E4               [12] 1164 	clr	a
      0002C3 93               [24] 1165 	movc	a,@a+dptr
                                   1166 ;	keyboard.c:260: if(mod & COMBINATION_KEY) {
      0002C4 F5*36            [12] 1167 	mov	_sendKeys_mod_65536_54,a
      0002C6 30 E7 53         [24] 1168 	jnb	acc.7,00121$
                                   1169 ;	keyboard.c:261: if(hidCode > 0xf) {
      0002C9 EE               [12] 1170 	mov	a,r6
      0002CA 24 F0            [12] 1171 	add	a,#0xff - 0x0f
      0002CC 50 16            [24] 1172 	jnc	00112$
                                   1173 ;	keyboard.c:262: ToHost.Normal.Modifier = 1 << (hidCode - 0xe0);
      0002CE 8E 02            [24] 1174 	mov	ar2,r6
      0002D0 EA               [12] 1175 	mov	a,r2
      0002D1 24 20            [12] 1176 	add	a,#0x20
      0002D3 F5 F0            [12] 1177 	mov	b,a
      0002D5 05 F0            [12] 1178 	inc	b
      0002D7 74 01            [12] 1179 	mov	a,#0x01
      0002D9 80 02            [24] 1180 	sjmp	00207$
      0002DB                       1181 00205$:
      0002DB 25 E0            [12] 1182 	add	a,acc
      0002DD                       1183 00207$:
      0002DD D5 F0 FB         [24] 1184 	djnz	b,00205$
      0002E0 F5*19            [12] 1185 	mov	_ToHost,a
      0002E2 80 14            [24] 1186 	sjmp	00113$
      0002E4                       1187 00112$:
                                   1188 ;	keyboard.c:263: } else if(hidCode == 0x1) {
      0002E4 BE 01 08         [24] 1189 	cjne	r6,#0x01,00109$
                                   1190 ;	keyboard.c:264: layer = fnLayer;
      0002E7 75*37r00         [24] 1191 	mov	_sendKeys_layer_65536_54,#_fnLayer
      0002EA 75*38s00         [24] 1192 	mov	(_sendKeys_layer_65536_54 + 1),#(_fnLayer >> 8)
      0002ED 80 09            [24] 1193 	sjmp	00113$
      0002EF                       1194 00109$:
                                   1195 ;	keyboard.c:265: } else if(hidCode == 0x2) {
      0002EF BE 02 06         [24] 1196 	cjne	r6,#0x02,00113$
                                   1197 ;	keyboard.c:266: layer = numLayer;
      0002F2 75*37r00         [24] 1198 	mov	_sendKeys_layer_65536_54,#_numLayer
      0002F5 75*38s00         [24] 1199 	mov	(_sendKeys_layer_65536_54 + 1),#(_numLayer >> 8)
      0002F8                       1200 00113$:
                                   1201 ;	keyboard.c:268: if(downCount == 1 && prevDownCount == 0) {
      0002F8 74 01            [12] 1202 	mov	a,#0x01
      0002FA B5*18 1A         [24] 1203 	cjne	a,_downCount,00115$
      0002FD E5*34            [12] 1204 	mov	a,_sendKeys_prevDownCount_65536_54
                                   1205 ;	keyboard.c:269: alternateKeyPending = combineKeyAlternates[mod & 0xf];
      0002FF 70 16            [24] 1206 	jnz	00115$
      000301 AA*36            [24] 1207 	mov	r2,_sendKeys_mod_65536_54
      000303 53 02 0F         [24] 1208 	anl	ar2,#0x0f
      000306 7F 00            [12] 1209 	mov	r7,#0x00
      000308 EA               [12] 1210 	mov	a,r2
      000309 24rD9            [12] 1211 	add	a,#_sendKeys_combineKeyAlternates_65536_54
      00030B F5 82            [12] 1212 	mov	dpl,a
      00030D EF               [12] 1213 	mov	a,r7
      00030E 34s00            [12] 1214 	addc	a,#(_sendKeys_combineKeyAlternates_65536_54 >> 8)
      000310 F5 83            [12] 1215 	mov	dph,a
      000312 E4               [12] 1216 	clr	a
      000313 93               [24] 1217 	movc	a,@a+dptr
      000314 F5*35            [12] 1218 	mov	_sendKeys_alternateKeyPending_65536_54,a
                                   1219 ;	keyboard.c:270: return;
      000316 22               [24] 1220 	ret
      000317                       1221 00115$:
                                   1222 ;	keyboard.c:272: alternateKeyPending = 0;	
      000317 75*35 00         [24] 1223 	mov	_sendKeys_alternateKeyPending_65536_54,#0x00
      00031A 80 16            [24] 1224 	sjmp	00128$
      00031C                       1225 00121$:
                                   1226 ;	keyboard.c:276: if(mod & 0x0f) {
      00031C E5*36            [12] 1227 	mov	a,_sendKeys_mod_65536_54
      00031E 54 0F            [12] 1228 	anl	a,#0x0f
      000320 60 06            [24] 1229 	jz	00119$
                                   1230 ;	keyboard.c:277: ToHost.Normal.Modifier = mod & 0x0f; 
      000322 74 0F            [12] 1231 	mov	a,#0x0f
      000324 55*36            [12] 1232 	anl	a,_sendKeys_mod_65536_54
      000326 F5*19            [12] 1233 	mov	_ToHost,a
      000328                       1234 00119$:
                                   1235 ;	keyboard.c:279: ToHost.Normal.Code[HostIndex++] = hidCode;
      000328 AF*39            [24] 1236 	mov	r7,_sendKeys_HostIndex_65536_54
      00032A 05*39            [12] 1237 	inc	_sendKeys_HostIndex_65536_54
      00032C EF               [12] 1238 	mov	a,r7
      00032D 24r1B            [12] 1239 	add	a,#(_ToHost + 0x0002)
      00032F F8               [12] 1240 	mov	r0,a
      000330 A6 06            [24] 1241 	mov	@r0,ar6
      000332                       1242 00128$:
                                   1243 ;	keyboard.c:249: for(kp = activeKeys; kp < activeKeys + MAX_ROLLOVER; kp++) {
      000332 74 04            [12] 1244 	mov	a,#0x04
      000334 2B               [12] 1245 	add	a,r3
      000335 FB               [12] 1246 	mov	r3,a
      000336 E4               [12] 1247 	clr	a
      000337 3C               [12] 1248 	addc	a,r4
      000338 FC               [12] 1249 	mov	r4,a
      000339 02r02r3B         [24] 1250 	ljmp	00127$
      00033C                       1251 00125$:
                                   1252 ;	keyboard.c:285: prevDownCount = downCount;
      00033C 85*18*34         [24] 1253 	mov	_sendKeys_prevDownCount_65536_54,_downCount
                                   1254 ;	keyboard.c:286: } 
      00033F 22               [24] 1255 	ret
                                   1256 ;------------------------------------------------------------
                                   1257 ;Allocation info for local variables in function 'updateActiveKeys'
                                   1258 ;------------------------------------------------------------
                                   1259 ;mask                      Allocated with name '_updateActiveKeys_mask_65536_68'
                                   1260 ;kp                        Allocated to registers 
                                   1261 ;keyState                  Allocated with name '_updateActiveKeys_keyState_65536_68'
                                   1262 ;keyChanges                Allocated with name '_updateActiveKeys_keyChanges_65536_68'
                                   1263 ;sloc0                     Allocated with name '_updateActiveKeys_sloc0_1_0'
                                   1264 ;sloc1                     Allocated with name '_updateActiveKeys_sloc1_1_0'
                                   1265 ;------------------------------------------------------------
                                   1266 ;	keyboard.c:298: BYTE updateActiveKeys() {
                                   1267 ;	-----------------------------------------
                                   1268 ;	 function updateActiveKeys
                                   1269 ;	-----------------------------------------
      000340                       1270 _updateActiveKeys:
                                   1271 ;	keyboard.c:303: BYTE keyChanges = 0;
      000340 75*02 00         [24] 1272 	mov	_updateActiveKeys_keyChanges_65536_68,#0x00
                                   1273 ;	keyboard.c:305: for(kp = activeKeys; kp < activeKeys + MAX_ROLLOVER; kp++) {
      000343 7Cr00            [12] 1274 	mov	r4,#_activeKeys
      000345 7D 00            [12] 1275 	mov	r5,#0x00
      000347 7E 40            [12] 1276 	mov	r6,#0x40
      000349                       1277 00117$:
      000349 74r18            [12] 1278 	mov	a,#(_activeKeys + 0x0018)
      00034B C0 E0            [24] 1279 	push	acc
      00034D 74s00            [12] 1280 	mov	a,#((_activeKeys + 0x0018) >> 8)
      00034F C0 E0            [24] 1281 	push	acc
      000351 74 40            [12] 1282 	mov	a,#0x40
      000353 C0 E0            [24] 1283 	push	acc
      000355 8C 82            [24] 1284 	mov	dpl,r4
      000357 8D 83            [24] 1285 	mov	dph,r5
      000359 8E F0            [24] 1286 	mov	b,r6
      00035B 12r00r00         [24] 1287 	lcall	___gptr_cmp
      00035E 15 81            [12] 1288 	dec	sp
      000360 15 81            [12] 1289 	dec	sp
      000362 15 81            [12] 1290 	dec	sp
      000364 40 03            [24] 1291 	jc	00153$
      000366 02r04r93         [24] 1292 	ljmp	00115$
      000369                       1293 00153$:
                                   1294 ;	keyboard.c:307: if (kp->state == FREE) {
      000369 74 02            [12] 1295 	mov	a,#0x02
      00036B 2C               [12] 1296 	add	a,r4
      00036C F5*03            [12] 1297 	mov	_updateActiveKeys_sloc0_1_0,a
      00036E E4               [12] 1298 	clr	a
      00036F 3D               [12] 1299 	addc	a,r5
      000370 F5*04            [12] 1300 	mov	(_updateActiveKeys_sloc0_1_0 + 1),a
      000372 8E*05            [24] 1301 	mov	(_updateActiveKeys_sloc0_1_0 + 2),r6
      000374 85*03 82         [24] 1302 	mov	dpl,_updateActiveKeys_sloc0_1_0
      000377 85*04 83         [24] 1303 	mov	dph,(_updateActiveKeys_sloc0_1_0 + 1)
      00037A 85*05 F0         [24] 1304 	mov	b,(_updateActiveKeys_sloc0_1_0 + 2)
      00037D 12r00r00         [24] 1305 	lcall	__gptrget
      000380 70 03            [24] 1306 	jnz	00154$
      000382 02r04r89         [24] 1307 	ljmp	00114$
      000385                       1308 00154$:
                                   1309 ;	keyboard.c:311: keyState = allKeys[kp->col];
      000385 8C 82            [24] 1310 	mov	dpl,r4
      000387 8D 83            [24] 1311 	mov	dph,r5
      000389 8E F0            [24] 1312 	mov	b,r6
      00038B 12r00r00         [24] 1313 	lcall	__gptrget
      00038E 24r00            [12] 1314 	add	a,#_allKeys
      000390 F9               [12] 1315 	mov	r1,a
      000391 87*01            [24] 1316 	mov	_updateActiveKeys_keyState_65536_68,@r1
                                   1317 ;	keyboard.c:312: mask = 1 << kp->row;
      000393 74 01            [12] 1318 	mov	a,#0x01
      000395 2C               [12] 1319 	add	a,r4
      000396 FA               [12] 1320 	mov	r2,a
      000397 E4               [12] 1321 	clr	a
      000398 3D               [12] 1322 	addc	a,r5
      000399 FB               [12] 1323 	mov	r3,a
      00039A 8E 07            [24] 1324 	mov	ar7,r6
      00039C 8A 82            [24] 1325 	mov	dpl,r2
      00039E 8B 83            [24] 1326 	mov	dph,r3
      0003A0 8F F0            [24] 1327 	mov	b,r7
      0003A2 12r00r00         [24] 1328 	lcall	__gptrget
      0003A5 FA               [12] 1329 	mov	r2,a
      0003A6 8A F0            [24] 1330 	mov	b,r2
      0003A8 05 F0            [12] 1331 	inc	b
      0003AA 74 01            [12] 1332 	mov	a,#0x01
      0003AC 80 02            [24] 1333 	sjmp	00157$
      0003AE                       1334 00155$:
      0003AE 25 E0            [12] 1335 	add	a,acc
      0003B0                       1336 00157$:
      0003B0 D5 F0 FB         [24] 1337 	djnz	b,00155$
      0003B3 F5*00            [12] 1338 	mov	_updateActiveKeys_mask_65536_68,a
                                   1339 ;	keyboard.c:313: if(mask & keyState) {
      0003B5 E5*01            [12] 1340 	mov	a,_updateActiveKeys_keyState_65536_68
      0003B7 55*00            [12] 1341 	anl	a,_updateActiveKeys_mask_65536_68
      0003B9 60 62            [24] 1342 	jz	00112$
                                   1343 ;	keyboard.c:314: kp->count++;
      0003BB 74 03            [12] 1344 	mov	a,#0x03
      0003BD 2C               [12] 1345 	add	a,r4
      0003BE F5*06            [12] 1346 	mov	_updateActiveKeys_sloc1_1_0,a
      0003C0 E4               [12] 1347 	clr	a
      0003C1 3D               [12] 1348 	addc	a,r5
      0003C2 F5*07            [12] 1349 	mov	(_updateActiveKeys_sloc1_1_0 + 1),a
      0003C4 8E*08            [24] 1350 	mov	(_updateActiveKeys_sloc1_1_0 + 2),r6
      0003C6 85*06 82         [24] 1351 	mov	dpl,_updateActiveKeys_sloc1_1_0
      0003C9 85*07 83         [24] 1352 	mov	dph,(_updateActiveKeys_sloc1_1_0 + 1)
      0003CC 85*08 F0         [24] 1353 	mov	b,(_updateActiveKeys_sloc1_1_0 + 2)
      0003CF 12r00r00         [24] 1354 	lcall	__gptrget
      0003D2 FB               [12] 1355 	mov	r3,a
      0003D3 0B               [12] 1356 	inc	r3
      0003D4 85*06 82         [24] 1357 	mov	dpl,_updateActiveKeys_sloc1_1_0
      0003D7 85*07 83         [24] 1358 	mov	dph,(_updateActiveKeys_sloc1_1_0 + 1)
      0003DA 85*08 F0         [24] 1359 	mov	b,(_updateActiveKeys_sloc1_1_0 + 2)
      0003DD EB               [12] 1360 	mov	a,r3
      0003DE 12r00r00         [24] 1361 	lcall	__gptrput
                                   1362 ;	keyboard.c:315: if(kp->count >= DOWN_COUNT) {
      0003E1 BB 14 00         [24] 1363 	cjne	r3,#0x14,00159$
      0003E4                       1364 00159$:
      0003E4 50 03            [24] 1365 	jnc	00160$
      0003E6 02r04r75         [24] 1366 	ljmp	00113$
      0003E9                       1367 00160$:
                                   1368 ;	keyboard.c:316: kp->count = DOWN_COUNT;
      0003E9 85*06 82         [24] 1369 	mov	dpl,_updateActiveKeys_sloc1_1_0
      0003EC 85*07 83         [24] 1370 	mov	dph,(_updateActiveKeys_sloc1_1_0 + 1)
      0003EF 85*08 F0         [24] 1371 	mov	b,(_updateActiveKeys_sloc1_1_0 + 2)
      0003F2 74 14            [12] 1372 	mov	a,#0x14
      0003F4 12r00r00         [24] 1373 	lcall	__gptrput
                                   1374 ;	keyboard.c:317: if(kp->state != DOWN) {
      0003F7 85*03 82         [24] 1375 	mov	dpl,_updateActiveKeys_sloc0_1_0
      0003FA 85*04 83         [24] 1376 	mov	dph,(_updateActiveKeys_sloc0_1_0 + 1)
      0003FD 85*05 F0         [24] 1377 	mov	b,(_updateActiveKeys_sloc0_1_0 + 2)
      000400 12r00r00         [24] 1378 	lcall	__gptrget
      000403 FB               [12] 1379 	mov	r3,a
      000404 BB 01 02         [24] 1380 	cjne	r3,#0x01,00161$
      000407 80 6C            [24] 1381 	sjmp	00113$
      000409                       1382 00161$:
                                   1383 ;	keyboard.c:318: kp->state = DOWN;
      000409 85*03 82         [24] 1384 	mov	dpl,_updateActiveKeys_sloc0_1_0
      00040C 85*04 83         [24] 1385 	mov	dph,(_updateActiveKeys_sloc0_1_0 + 1)
      00040F 85*05 F0         [24] 1386 	mov	b,(_updateActiveKeys_sloc0_1_0 + 2)
      000412 74 01            [12] 1387 	mov	a,#0x01
      000414 12r00r00         [24] 1388 	lcall	__gptrput
                                   1389 ;	keyboard.c:319: keyChanges = 1;
                                   1390 ;	1-genFromRTrack replaced	mov	_updateActiveKeys_keyChanges_65536_68,#0x01
      000417 F5*02            [12] 1391 	mov	_updateActiveKeys_keyChanges_65536_68,a
                                   1392 ;	keyboard.c:320: downCount++;
      000419 05*18            [12] 1393 	inc	_downCount
      00041B 80 58            [24] 1394 	sjmp	00113$
      00041D                       1395 00112$:
                                   1396 ;	keyboard.c:324: kp->count--;
      00041D 74 03            [12] 1397 	mov	a,#0x03
      00041F 2C               [12] 1398 	add	a,r4
      000420 FA               [12] 1399 	mov	r2,a
      000421 E4               [12] 1400 	clr	a
      000422 3D               [12] 1401 	addc	a,r5
      000423 FB               [12] 1402 	mov	r3,a
      000424 8E 07            [24] 1403 	mov	ar7,r6
      000426 C0 04            [24] 1404 	push	ar4
      000428 C0 05            [24] 1405 	push	ar5
      00042A C0 06            [24] 1406 	push	ar6
      00042C 8A 82            [24] 1407 	mov	dpl,r2
      00042E 8B 83            [24] 1408 	mov	dph,r3
      000430 8F F0            [24] 1409 	mov	b,r7
      000432 12r00r00         [24] 1410 	lcall	__gptrget
      000435 FE               [12] 1411 	mov	r6,a
      000436 1E               [12] 1412 	dec	r6
      000437 8A 82            [24] 1413 	mov	dpl,r2
      000439 8B 83            [24] 1414 	mov	dph,r3
      00043B 8F F0            [24] 1415 	mov	b,r7
      00043D EE               [12] 1416 	mov	a,r6
      00043E 12r00r00         [24] 1417 	lcall	__gptrput
                                   1418 ;	keyboard.c:325: if(kp->count <= 1) {
      000441 C3               [12] 1419 	clr	c
      000442 74 01            [12] 1420 	mov	a,#0x01
      000444 9E               [12] 1421 	subb	a,r6
      000445 D0 06            [24] 1422 	pop	ar6
      000447 D0 05            [24] 1423 	pop	ar5
      000449 D0 04            [24] 1424 	pop	ar4
      00044B 40 28            [24] 1425 	jc	00113$
                                   1426 ;	keyboard.c:326: if(kp->state == DOWN) {
      00044D 85*03 82         [24] 1427 	mov	dpl,_updateActiveKeys_sloc0_1_0
      000450 85*04 83         [24] 1428 	mov	dph,(_updateActiveKeys_sloc0_1_0 + 1)
      000453 85*05 F0         [24] 1429 	mov	b,(_updateActiveKeys_sloc0_1_0 + 2)
      000456 12r00r00         [24] 1430 	lcall	__gptrget
      000459 FF               [12] 1431 	mov	r7,a
      00045A BF 01 05         [24] 1432 	cjne	r7,#0x01,00108$
                                   1433 ;	keyboard.c:327: downCount--;
      00045D 15*18            [12] 1434 	dec	_downCount
                                   1435 ;	keyboard.c:328: keyChanges = 1;
      00045F 75*02 01         [24] 1436 	mov	_updateActiveKeys_keyChanges_65536_68,#0x01
      000462                       1437 00108$:
                                   1438 ;	keyboard.c:330: kp->state = FREE;
      000462 74 02            [12] 1439 	mov	a,#0x02
      000464 2C               [12] 1440 	add	a,r4
      000465 FA               [12] 1441 	mov	r2,a
      000466 E4               [12] 1442 	clr	a
      000467 3D               [12] 1443 	addc	a,r5
      000468 FB               [12] 1444 	mov	r3,a
      000469 8E 07            [24] 1445 	mov	ar7,r6
      00046B 8A 82            [24] 1446 	mov	dpl,r2
      00046D 8B 83            [24] 1447 	mov	dph,r3
      00046F 8F F0            [24] 1448 	mov	b,r7
      000471 E4               [12] 1449 	clr	a
      000472 12r00r00         [24] 1450 	lcall	__gptrput
      000475                       1451 00113$:
                                   1452 ;	keyboard.c:335: allKeys[kp->col] &= ~mask;
      000475 8C 82            [24] 1453 	mov	dpl,r4
      000477 8D 83            [24] 1454 	mov	dph,r5
      000479 8E F0            [24] 1455 	mov	b,r6
      00047B 12r00r00         [24] 1456 	lcall	__gptrget
      00047E 24r00            [12] 1457 	add	a,#_allKeys
      000480 F9               [12] 1458 	mov	r1,a
      000481 87 07            [24] 1459 	mov	ar7,@r1
      000483 E5*00            [12] 1460 	mov	a,_updateActiveKeys_mask_65536_68
      000485 F4               [12] 1461 	cpl	a
      000486 FB               [12] 1462 	mov	r3,a
      000487 5F               [12] 1463 	anl	a,r7
      000488 F7               [12] 1464 	mov	@r1,a
      000489                       1465 00114$:
                                   1466 ;	keyboard.c:305: for(kp = activeKeys; kp < activeKeys + MAX_ROLLOVER; kp++) {
      000489 74 04            [12] 1467 	mov	a,#0x04
      00048B 2C               [12] 1468 	add	a,r4
      00048C FC               [12] 1469 	mov	r4,a
      00048D E4               [12] 1470 	clr	a
      00048E 3D               [12] 1471 	addc	a,r5
      00048F FD               [12] 1472 	mov	r5,a
      000490 02r03r49         [24] 1473 	ljmp	00117$
      000493                       1474 00115$:
                                   1475 ;	keyboard.c:337: return keyChanges;
      000493 85*02 82         [24] 1476 	mov	dpl,_updateActiveKeys_keyChanges_65536_68
                                   1477 ;	keyboard.c:338: }
      000496 22               [24] 1478 	ret
                                   1479 ;------------------------------------------------------------
                                   1480 ;Allocation info for local variables in function 'addActiveKey'
                                   1481 ;------------------------------------------------------------
                                   1482 ;keyState                  Allocated with name '_addActiveKey_PARM_2'
                                   1483 ;col                       Allocated to registers r7 
                                   1484 ;row                       Allocated to registers r6 
                                   1485 ;mask                      Allocated to registers r6 
                                   1486 ;kp                        Allocated with name '_addActiveKey_kp_65536_79'
                                   1487 ;sloc0                     Allocated with name '_addActiveKey_sloc0_1_0'
                                   1488 ;------------------------------------------------------------
                                   1489 ;	keyboard.c:345: void addActiveKey(BYTE col, BYTE keyState) {
                                   1490 ;	-----------------------------------------
                                   1491 ;	 function addActiveKey
                                   1492 ;	-----------------------------------------
      000497                       1493 _addActiveKey:
      000497 AF 82            [24] 1494 	mov	r7,dpl
                                   1495 ;	keyboard.c:353: if(keyState == 0) {
      000499 E5*00            [12] 1496 	mov	a,_addActiveKey_PARM_2
      00049B 70 01            [24] 1497 	jnz	00102$
                                   1498 ;	keyboard.c:354: return;	
      00049D 22               [24] 1499 	ret
      00049E                       1500 00102$:
                                   1501 ;	keyboard.c:356: mask = 1;
      00049E 7E 01            [12] 1502 	mov	r6,#0x01
                                   1503 ;	keyboard.c:357: for(row=0; row < 8; row++) {
      0004A0 7D 00            [12] 1504 	mov	r5,#0x00
      0004A2                       1505 00109$:
                                   1506 ;	keyboard.c:358: if(mask & keyState) {
      0004A2 E5*00            [12] 1507 	mov	a,_addActiveKey_PARM_2
      0004A4 5E               [12] 1508 	anl	a,r6
      0004A5 70 0B            [24] 1509 	jnz	00122$
                                   1510 ;	keyboard.c:361: mask <<= 1;
      0004A7 8E 04            [24] 1511 	mov	ar4,r6
      0004A9 EC               [12] 1512 	mov	a,r4
      0004AA 2C               [12] 1513 	add	a,r4
      0004AB FE               [12] 1514 	mov	r6,a
                                   1515 ;	keyboard.c:357: for(row=0; row < 8; row++) {
      0004AC 0D               [12] 1516 	inc	r5
      0004AD BD 08 00         [24] 1517 	cjne	r5,#0x08,00143$
      0004B0                       1518 00143$:
      0004B0 40 F0            [24] 1519 	jc	00109$
      0004B2                       1520 00122$:
      0004B2 8D 06            [24] 1521 	mov	ar6,r5
                                   1522 ;	keyboard.c:366: for(kp = activeKeys; kp < activeKeys + MAX_ROLLOVER; kp++) {
      0004B4 75*01r00         [24] 1523 	mov	_addActiveKey_kp_65536_79,#_activeKeys
      0004B7 75*02 00         [24] 1524 	mov	(_addActiveKey_kp_65536_79 + 1),#0x00
      0004BA 75*03 40         [24] 1525 	mov	(_addActiveKey_kp_65536_79 + 2),#0x40
      0004BD A8*01            [24] 1526 	mov	r0,_addActiveKey_kp_65536_79
      0004BF A9*02            [24] 1527 	mov	r1,(_addActiveKey_kp_65536_79 + 1)
      0004C1 AA*03            [24] 1528 	mov	r2,(_addActiveKey_kp_65536_79 + 2)
      0004C3                       1529 00112$:
      0004C3 74r18            [12] 1530 	mov	a,#(_activeKeys + 0x0018)
      0004C5 C0 E0            [24] 1531 	push	acc
      0004C7 74s00            [12] 1532 	mov	a,#((_activeKeys + 0x0018) >> 8)
      0004C9 C0 E0            [24] 1533 	push	acc
      0004CB 74 40            [12] 1534 	mov	a,#0x40
      0004CD C0 E0            [24] 1535 	push	acc
      0004CF 88 82            [24] 1536 	mov	dpl,r0
      0004D1 89 83            [24] 1537 	mov	dph,r1
      0004D3 8A F0            [24] 1538 	mov	b,r2
      0004D5 12r00r00         [24] 1539 	lcall	___gptr_cmp
      0004D8 15 81            [12] 1540 	dec	sp
      0004DA 15 81            [12] 1541 	dec	sp
      0004DC 15 81            [12] 1542 	dec	sp
      0004DE 50 6F            [24] 1543 	jnc	00114$
                                   1544 ;	keyboard.c:367: if(kp->state == FREE) {
      0004E0 74 02            [12] 1545 	mov	a,#0x02
      0004E2 28               [12] 1546 	add	a,r0
      0004E3 F5*04            [12] 1547 	mov	_addActiveKey_sloc0_1_0,a
      0004E5 E4               [12] 1548 	clr	a
      0004E6 39               [12] 1549 	addc	a,r1
      0004E7 F5*05            [12] 1550 	mov	(_addActiveKey_sloc0_1_0 + 1),a
      0004E9 8A*06            [24] 1551 	mov	(_addActiveKey_sloc0_1_0 + 2),r2
      0004EB 85*04 82         [24] 1552 	mov	dpl,_addActiveKey_sloc0_1_0
      0004EE 85*05 83         [24] 1553 	mov	dph,(_addActiveKey_sloc0_1_0 + 1)
      0004F1 85*06 F0         [24] 1554 	mov	b,(_addActiveKey_sloc0_1_0 + 2)
      0004F4 12r00r00         [24] 1555 	lcall	__gptrget
      0004F7 70 46            [24] 1556 	jnz	00113$
                                   1557 ;	keyboard.c:368: kp->col = col;
      0004F9 85*01 82         [24] 1558 	mov	dpl,_addActiveKey_kp_65536_79
      0004FC 85*02 83         [24] 1559 	mov	dph,(_addActiveKey_kp_65536_79 + 1)
      0004FF 85*03 F0         [24] 1560 	mov	b,(_addActiveKey_kp_65536_79 + 2)
      000502 EF               [12] 1561 	mov	a,r7
      000503 12r00r00         [24] 1562 	lcall	__gptrput
                                   1563 ;	keyboard.c:369: kp->row = row;
      000506 74 01            [12] 1564 	mov	a,#0x01
      000508 25*01            [12] 1565 	add	a,_addActiveKey_kp_65536_79
      00050A FB               [12] 1566 	mov	r3,a
      00050B E4               [12] 1567 	clr	a
      00050C 35*02            [12] 1568 	addc	a,(_addActiveKey_kp_65536_79 + 1)
      00050E FC               [12] 1569 	mov	r4,a
      00050F AD*03            [24] 1570 	mov	r5,(_addActiveKey_kp_65536_79 + 2)
      000511 8B 82            [24] 1571 	mov	dpl,r3
      000513 8C 83            [24] 1572 	mov	dph,r4
      000515 8D F0            [24] 1573 	mov	b,r5
      000517 EE               [12] 1574 	mov	a,r6
      000518 12r00r00         [24] 1575 	lcall	__gptrput
                                   1576 ;	keyboard.c:370: kp->count = DEBOUNCE_COUNT;
      00051B 74 03            [12] 1577 	mov	a,#0x03
      00051D 25*01            [12] 1578 	add	a,_addActiveKey_kp_65536_79
      00051F FB               [12] 1579 	mov	r3,a
      000520 E4               [12] 1580 	clr	a
      000521 35*02            [12] 1581 	addc	a,(_addActiveKey_kp_65536_79 + 1)
      000523 FC               [12] 1582 	mov	r4,a
      000524 AD*03            [24] 1583 	mov	r5,(_addActiveKey_kp_65536_79 + 2)
      000526 8B 82            [24] 1584 	mov	dpl,r3
      000528 8C 83            [24] 1585 	mov	dph,r4
      00052A 8D F0            [24] 1586 	mov	b,r5
      00052C 74 0A            [12] 1587 	mov	a,#0x0a
      00052E 12r00r00         [24] 1588 	lcall	__gptrput
                                   1589 ;	keyboard.c:371: kp->state = UP;
      000531 85*04 82         [24] 1590 	mov	dpl,_addActiveKey_sloc0_1_0
      000534 85*05 83         [24] 1591 	mov	dph,(_addActiveKey_sloc0_1_0 + 1)
      000537 85*06 F0         [24] 1592 	mov	b,(_addActiveKey_sloc0_1_0 + 2)
      00053A 74 02            [12] 1593 	mov	a,#0x02
                                   1594 ;	keyboard.c:372: break;
      00053C 02r00r00         [24] 1595 	ljmp	__gptrput
      00053F                       1596 00113$:
                                   1597 ;	keyboard.c:366: for(kp = activeKeys; kp < activeKeys + MAX_ROLLOVER; kp++) {
      00053F 74 04            [12] 1598 	mov	a,#0x04
      000541 28               [12] 1599 	add	a,r0
      000542 F8               [12] 1600 	mov	r0,a
      000543 E4               [12] 1601 	clr	a
      000544 39               [12] 1602 	addc	a,r1
      000545 F9               [12] 1603 	mov	r1,a
      000546 88*01            [24] 1604 	mov	_addActiveKey_kp_65536_79,r0
      000548 89*02            [24] 1605 	mov	(_addActiveKey_kp_65536_79 + 1),r1
      00054A 8A*03            [24] 1606 	mov	(_addActiveKey_kp_65536_79 + 2),r2
      00054C 02r04rC3         [24] 1607 	ljmp	00112$
      00054F                       1608 00114$:
                                   1609 ;	keyboard.c:375: }
      00054F 22               [24] 1610 	ret
                                   1611 ;------------------------------------------------------------
                                   1612 ;Allocation info for local variables in function 'scan'
                                   1613 ;------------------------------------------------------------
                                   1614 ;col                       Allocated to registers r7 
                                   1615 ;------------------------------------------------------------
                                   1616 ;	keyboard.c:382: void scan(void) {
                                   1617 ;	-----------------------------------------
                                   1618 ;	 function scan
                                   1619 ;	-----------------------------------------
      000550                       1620 _scan:
                                   1621 ;	keyboard.c:384: WDTCR = Wdt;
      000550 85*00 E1         [24] 1622 	mov	_WDTCR,_Wdt
                                   1623 ;	keyboard.c:385: if (Ep0.EmuOk == CLR)
      000553 E5*01            [12] 1624 	mov	a,(_Ep0 + 0x0001)
      000555 70 01            [24] 1625 	jnz	00116$
                                   1626 ;	keyboard.c:386: return;
                                   1627 ;	keyboard.c:390: for(col = 0; col < MAX_COLUMN; col++) {
      000557 22               [24] 1628 	ret
      000558                       1629 00116$:
      000558 7F 00            [12] 1630 	mov	r7,#0x00
      00055A                       1631 00109$:
                                   1632 ;	keyboard.c:391: allKeys[col] = read_column(col);
      00055A EF               [12] 1633 	mov	a,r7
      00055B 24r00            [12] 1634 	add	a,#_allKeys
      00055D F9               [12] 1635 	mov	r1,a
      00055E 8F 82            [24] 1636 	mov	dpl,r7
      000560 C0 07            [24] 1637 	push	ar7
      000562 C0 01            [24] 1638 	push	ar1
      000564 12r01r0A         [24] 1639 	lcall	_read_column
      000567 E5 82            [12] 1640 	mov	a,dpl
      000569 D0 01            [24] 1641 	pop	ar1
      00056B D0 07            [24] 1642 	pop	ar7
      00056D F7               [12] 1643 	mov	@r1,a
                                   1644 ;	keyboard.c:390: for(col = 0; col < MAX_COLUMN; col++) {
      00056E 0F               [12] 1645 	inc	r7
      00056F BF 12 00         [24] 1646 	cjne	r7,#0x12,00142$
      000572                       1647 00142$:
      000572 40 E6            [24] 1648 	jc	00109$
                                   1649 ;	keyboard.c:395: if(updateActiveKeys()) {
      000574 12r03r40         [24] 1650 	lcall	_updateActiveKeys
      000577 E5 82            [12] 1651 	mov	a,dpl
      000579 60 0C            [24] 1652 	jz	00120$
                                   1653 ;	keyboard.c:396: sendKeys();
      00057B 12r02r0E         [24] 1654 	lcall	_sendKeys
                                   1655 ;	keyboard.c:397: sendKeyReport((BYTE *)&ToHost);
      00057E 90r00r19         [24] 1656 	mov	dptr,#_ToHost
      000581 75 F0 40         [24] 1657 	mov	b,#0x40
      000584 12r01rB4         [24] 1658 	lcall	_sendKeyReport
                                   1659 ;	keyboard.c:400: for(col = 0; col < MAX_COLUMN; col++) {
      000587                       1660 00120$:
      000587 7F 00            [12] 1661 	mov	r7,#0x00
      000589                       1662 00111$:
                                   1663 ;	keyboard.c:401: if(allKeys[col]) {
      000589 EF               [12] 1664 	mov	a,r7
      00058A 24r00            [12] 1665 	add	a,#_allKeys
      00058C F9               [12] 1666 	mov	r1,a
      00058D E7               [12] 1667 	mov	a,@r1
      00058E FE               [12] 1668 	mov	r6,a
      00058F 60 0B            [24] 1669 	jz	00112$
                                   1670 ;	keyboard.c:402: addActiveKey(col, allKeys[col]);
      000591 8E*00            [24] 1671 	mov	_addActiveKey_PARM_2,r6
      000593 8F 82            [24] 1672 	mov	dpl,r7
      000595 C0 07            [24] 1673 	push	ar7
      000597 12r04r97         [24] 1674 	lcall	_addActiveKey
      00059A D0 07            [24] 1675 	pop	ar7
      00059C                       1676 00112$:
                                   1677 ;	keyboard.c:400: for(col = 0; col < MAX_COLUMN; col++) {
      00059C 0F               [12] 1678 	inc	r7
      00059D BF 12 00         [24] 1679 	cjne	r7,#0x12,00146$
      0005A0                       1680 00146$:
      0005A0 40 E7            [24] 1681 	jc	00111$
                                   1682 ;	keyboard.c:406: }
      0005A2 22               [24] 1683 	ret
                                   1684 	.area CSEG    (CODE)
                                   1685 	.area CONST   (CODE)
      000000                       1686 _prtHex_hexTab_65536_28:
      000000 27                    1687 	.db #0x27	; 39
      000001 1E                    1688 	.db #0x1e	; 30
      000002 1F                    1689 	.db #0x1f	; 31
      000003 20                    1690 	.db #0x20	; 32
      000004 21                    1691 	.db #0x21	; 33
      000005 22                    1692 	.db #0x22	; 34
      000006 23                    1693 	.db #0x23	; 35
      000007 24                    1694 	.db #0x24	; 36
      000008 25                    1695 	.db #0x25	; 37
      000009 26                    1696 	.db #0x26	; 38
      00000A 04                    1697 	.db #0x04	; 4
      00000B 05                    1698 	.db #0x05	; 5
      00000C 06                    1699 	.db #0x06	; 6
      00000D 07                    1700 	.db #0x07	; 7
      00000E 08                    1701 	.db #0x08	; 8
      00000F 09                    1702 	.db #0x09	; 9
      000010                       1703 _read_column_KeyScan_Table_65536_43:
      000010 FE                    1704 	.db #0xfe	; 254
      000011 FF                    1705 	.db #0xff	; 255
      000012 FF                    1706 	.db #0xff	; 255
      000013 FD                    1707 	.db #0xfd	; 253
      000014 FF                    1708 	.db #0xff	; 255
      000015 FF                    1709 	.db #0xff	; 255
      000016 FB                    1710 	.db #0xfb	; 251
      000017 FF                    1711 	.db #0xff	; 255
      000018 FF                    1712 	.db #0xff	; 255
      000019 F7                    1713 	.db #0xf7	; 247
      00001A FF                    1714 	.db #0xff	; 255
      00001B FF                    1715 	.db #0xff	; 255
      00001C EF                    1716 	.db #0xef	; 239
      00001D FF                    1717 	.db #0xff	; 255
      00001E FF                    1718 	.db #0xff	; 255
      00001F DF                    1719 	.db #0xdf	; 223
      000020 FF                    1720 	.db #0xff	; 255
      000021 FF                    1721 	.db #0xff	; 255
      000022 BF                    1722 	.db #0xbf	; 191
      000023 FF                    1723 	.db #0xff	; 255
      000024 FF                    1724 	.db #0xff	; 255
      000025 7F                    1725 	.db #0x7f	; 127
      000026 FF                    1726 	.db #0xff	; 255
      000027 FF                    1727 	.db #0xff	; 255
      000028 FF                    1728 	.db #0xff	; 255
      000029 FE                    1729 	.db #0xfe	; 254
      00002A FF                    1730 	.db #0xff	; 255
      00002B FF                    1731 	.db #0xff	; 255
      00002C FD                    1732 	.db #0xfd	; 253
      00002D FF                    1733 	.db #0xff	; 255
      00002E FF                    1734 	.db #0xff	; 255
      00002F FB                    1735 	.db #0xfb	; 251
      000030 FF                    1736 	.db #0xff	; 255
      000031 FF                    1737 	.db #0xff	; 255
      000032 F7                    1738 	.db #0xf7	; 247
      000033 FF                    1739 	.db #0xff	; 255
      000034 FF                    1740 	.db #0xff	; 255
      000035 EF                    1741 	.db #0xef	; 239
      000036 FF                    1742 	.db #0xff	; 255
      000037 FF                    1743 	.db #0xff	; 255
      000038 DF                    1744 	.db #0xdf	; 223
      000039 FF                    1745 	.db #0xff	; 255
      00003A FF                    1746 	.db #0xff	; 255
      00003B BF                    1747 	.db #0xbf	; 191
      00003C FF                    1748 	.db #0xff	; 255
      00003D FF                    1749 	.db #0xff	; 255
      00003E 7F                    1750 	.db #0x7f	; 127
      00003F FF                    1751 	.db #0xff	; 255
      000040 FF                    1752 	.db #0xff	; 255
      000041 FF                    1753 	.db #0xff	; 255
      000042 F7                    1754 	.db #0xf7	; 247
      000043 FF                    1755 	.db #0xff	; 255
      000044 FF                    1756 	.db #0xff	; 255
      000045 EF                    1757 	.db #0xef	; 239
      000046 00                    1758 	.db #0x00	; 0
      000047 00                    1759 	.db #0x00	; 0
      000048 E7                    1760 	.db #0xe7	; 231
      000049                       1761 _sendKeys_key_index_65536_54:
      000049 00                    1762 	.db #0x00	; 0
      00004A 00                    1763 	.db #0x00	; 0
      00004B 28                    1764 	.db #0x28	; 40
      00004C 00                    1765 	.db #0x00	; 0
      00004D 00                    1766 	.db #0x00	; 0
      00004E 12                    1767 	.db #0x12	; 18
      00004F 13                    1768 	.db #0x13	; 19
      000050 00                    1769 	.db #0x00	; 0
      000051 00                    1770 	.db #0x00	; 0
      000052 00                    1771 	.db #0x00	; 0
      000053 00                    1772 	.db #0x00	; 0
      000054 00                    1773 	.db #0x00	; 0
      000055 00                    1774 	.db #0x00	; 0
      000056 00                    1775 	.db #0x00	; 0
      000057 00                    1776 	.db #0x00	; 0
      000058 00                    1777 	.db #0x00	; 0
      000059 31                    1778 	.db #0x31	; 49	'1'
      00005A 15                    1779 	.db #0x15	; 21
      00005B 36                    1780 	.db #0x36	; 54	'6'
      00005C 19                    1781 	.db #0x19	; 25
      00005D 14                    1782 	.db #0x14	; 20
      00005E 23                    1783 	.db #0x23	; 35
      00005F 3E                    1784 	.db #0x3e	; 62
      000060 00                    1785 	.db #0x00	; 0
      000061 58                    1786 	.db #0x58	; 88	'X'
      000062 00                    1787 	.db #0x00	; 0
      000063 0F                    1788 	.db #0x0f	; 15
      000064 52                    1789 	.db #0x52	; 82	'R'
      000065 00                    1790 	.db #0x00	; 0
      000066 3D                    1791 	.db #0x3d	; 61
      000067 49                    1792 	.db #0x49	; 73	'I'
      000068 00                    1793 	.db #0x00	; 0
      000069 00                    1794 	.db #0x00	; 0
      00006A 56                    1795 	.db #0x56	; 86	'V'
      00006B 00                    1796 	.db #0x00	; 0
      00006C 50                    1797 	.db #0x50	; 80	'P'
      00006D 54                    1798 	.db #0x54	; 84	'T'
      00006E 00                    1799 	.db #0x00	; 0
      00006F 00                    1800 	.db #0x00	; 0
      000070 00                    1801 	.db #0x00	; 0
      000071 4B                    1802 	.db #0x4b	; 75	'K'
      000072 00                    1803 	.db #0x00	; 0
      000073 00                    1804 	.db #0x00	; 0
      000074 11                    1805 	.db #0x11	; 17
      000075 00                    1806 	.db #0x00	; 0
      000076 00                    1807 	.db #0x00	; 0
      000077 00                    1808 	.db #0x00	; 0
      000078 57                    1809 	.db #0x57	; 87	'W'
      000079 00                    1810 	.db #0x00	; 0
      00007A 00                    1811 	.db #0x00	; 0
      00007B 00                    1812 	.db #0x00	; 0
      00007C 00                    1813 	.db #0x00	; 0
      00007D 00                    1814 	.db #0x00	; 0
      00007E 30                    1815 	.db #0x30	; 48	'0'
      00007F 3C                    1816 	.db #0x3c	; 60
      000080 00                    1817 	.db #0x00	; 0
      000081 00                    1818 	.db #0x00	; 0
      000082 00                    1819 	.db #0x00	; 0
      000083 00                    1820 	.db #0x00	; 0
      000084 00                    1821 	.db #0x00	; 0
      000085 10                    1822 	.db #0x10	; 16
      000086 4A                    1823 	.db #0x4a	; 74	'J'
      000087 00                    1824 	.db #0x00	; 0
      000088 00                    1825 	.db #0x00	; 0
      000089 00                    1826 	.db #0x00	; 0
      00008A 00                    1827 	.db #0x00	; 0
      00008B 00                    1828 	.db #0x00	; 0
      00008C 00                    1829 	.db #0x00	; 0
      00008D 00                    1830 	.db #0x00	; 0
      00008E 00                    1831 	.db #0x00	; 0
      00008F 00                    1832 	.db #0x00	; 0
      000090 00                    1833 	.db #0x00	; 0
      000091 24                    1834 	.db #0x24	; 36
      000092 02                    1835 	.db #0x02	; 2
      000093 4E                    1836 	.db #0x4e	; 78	'N'
      000094 03                    1837 	.db #0x03	; 3
      000095 4D                    1838 	.db #0x4d	; 77	'M'
      000096 01                    1839 	.db #0x01	; 1
      000097 3F                    1840 	.db #0x3f	; 63
      000098 32                    1841 	.db #0x32	; 50	'2'
      000099 00                    1842 	.db #0x00	; 0
      00009A 04                    1843 	.db #0x04	; 4
      00009B 0E                    1844 	.db #0x0e	; 14
      00009C 05                    1845 	.db #0x05	; 5
      00009D 00                    1846 	.db #0x00	; 0
      00009E 00                    1847 	.db #0x00	; 0
      00009F 00                    1848 	.db #0x00	; 0
      0000A0 00                    1849 	.db #0x00	; 0
      0000A1 33                    1850 	.db #0x33	; 51	'3'
      0000A2 16                    1851 	.db #0x16	; 22
      0000A3 25                    1852 	.db #0x25	; 37
      0000A4 1C                    1853 	.db #0x1c	; 28
      0000A5 2B                    1854 	.db #0x2b	; 43
      0000A6 39                    1855 	.db #0x39	; 57	'9'
      0000A7 46                    1856 	.db #0x46	; 70	'F'
      0000A8 40                    1857 	.db #0x40	; 64
      0000A9 35                    1858 	.db #0x35	; 53	'5'
      0000AA 17                    1859 	.db #0x17	; 23
      0000AB 27                    1860 	.db #0x27	; 39
      0000AC 18                    1861 	.db #0x18	; 24
      0000AD 26                    1862 	.db #0x26	; 38
      0000AE 34                    1863 	.db #0x34	; 52	'4'
      0000AF 42                    1864 	.db #0x42	; 66	'B'
      0000B0 41                    1865 	.db #0x41	; 65	'A'
      0000B1 38                    1866 	.db #0x38	; 56	'8'
      0000B2 1A                    1867 	.db #0x1a	; 26
      0000B3 2A                    1868 	.db #0x2a	; 42
      0000B4 1B                    1869 	.db #0x1b	; 27
      0000B5 29                    1870 	.db #0x29	; 41
      0000B6 37                    1871 	.db #0x37	; 55	'7'
      0000B7 45                    1872 	.db #0x45	; 69	'E'
      0000B8 44                    1873 	.db #0x44	; 68	'D'
      0000B9 21                    1874 	.db #0x21	; 33
      0000BA 06                    1875 	.db #0x06	; 6
      0000BB 51                    1876 	.db #0x51	; 81	'Q'
      0000BC 07                    1877 	.db #0x07	; 7
      0000BD 20                    1878 	.db #0x20	; 32
      0000BE 2F                    1879 	.db #0x2f	; 47
      0000BF 43                    1880 	.db #0x43	; 67	'C'
      0000C0 53                    1881 	.db #0x53	; 83	'S'
      0000C1 2E                    1882 	.db #0x2e	; 46
      0000C2 08                    1883 	.db #0x08	; 8
      0000C3 1F                    1884 	.db #0x1f	; 31
      0000C4 09                    1885 	.db #0x09	; 9
      0000C5 1D                    1886 	.db #0x1d	; 29
      0000C6 2C                    1887 	.db #0x2c	; 44
      0000C7 47                    1888 	.db #0x47	; 71	'G'
      0000C8 3A                    1889 	.db #0x3a	; 58
      0000C9 48                    1890 	.db #0x48	; 72	'H'
      0000CA 0A                    1891 	.db #0x0a	; 10
      0000CB 55                    1892 	.db #0x55	; 85	'U'
      0000CC 0B                    1893 	.db #0x0b	; 11
      0000CD 1E                    1894 	.db #0x1e	; 30
      0000CE 3B                    1895 	.db #0x3b	; 59
      0000CF 2D                    1896 	.db #0x2d	; 45
      0000D0 22                    1897 	.db #0x22	; 34
      0000D1 00                    1898 	.db #0x00	; 0
      0000D2 0C                    1899 	.db #0x0c	; 12
      0000D3 4F                    1900 	.db #0x4f	; 79	'O'
      0000D4 0D                    1901 	.db #0x0d	; 13
      0000D5 4C                    1902 	.db #0x4c	; 76	'L'
      0000D6 00                    1903 	.db #0x00	; 0
      0000D7 00                    1904 	.db #0x00	; 0
      0000D8 00                    1905 	.db #0x00	; 0
      0000D9                       1906 _sendKeys_combineKeyAlternates_65536_54:
      0000D9 00                    1907 	.db #0x00	; 0
      0000DA 2C                    1908 	.db #0x2c	; 44
      0000DB 28                    1909 	.db #0x28	; 40
      0000DC 2B                    1910 	.db #0x2b	; 43
      0000DD 2A                    1911 	.db #0x2a	; 42
                                   1912 	.area XINIT   (CODE)
                                   1913 	.area CABS    (ABS,CODE)
